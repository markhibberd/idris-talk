Reading /Users/mth/.zshrc
Finished /Users/mth/.zshrc
[vex:org] 2001$ pwd
pwd
/Users/mth/org
[vex:org] 2002$ cd ~/home/idris-talk/
cd ~/home/idris-talk/
[vex:idris-talk] 2003$ ls
ls
Makefile		cabal.sandbox.config	src
[vex:idris-talk] 2004$ make repl
make repl
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

Type checking ./src/Data/TicTacToe.idr


  C-c C-cmake: *** [repl] Interrupt: 2

[vex:idris-talk] 2005$
[vex:idris-talk] 2005$ make
make
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

Type checking ./src/Data/TicTacToe.idr








  C-c C-cmake: *** [repl] Interrupt: 2

[vex:idris-talk] 2006$
[vex:idris-talk] 2006$
[vex:idris-talk] 2006$
[vex:idris-talk] 2006$
[vex:idris-talk] 2006$ make
make
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

Type checking ./src/Data/TicTacToe.idr








  C-c C-cmake: *** [repl] Interrupt: 2

[vex:idris-talk] 2007$
[vex:idris-talk] 2007$
[vex:idris-talk] 2007$
[vex:idris-talk] 2007$
[vex:idris-talk] 2007$ make
make
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :r
:r
./src/Data/TicTacToe.idr:245:10: error: expected: type signature
dostuff :: String -> { [STDIO] ==> [STDIO] } Eff IO ()
         ^
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr


*src/Data/TicTacToe>
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> run gamex
run gamex
io_bind (MkIO (\w =>
                 prim_io_bind (mkForeignPrim (FFun "putStr" [FString] FUnit)
                                             "Current game state ======\n"
                                             w)
                              (\x => prim__IO x)))
        (\{bindx4} =>
           io_bind (MkIO (\w =>
                            prim_io_bind (mkForeignPrim (FFun "putStr"
                                                              [FString]
                                                              FUnit)
                                                        " _ | _ | _\n-----------\n _ | _ | _\n-----------\n _ | _ | _\n\n"
                                                        w)
                                         (\x => prim__IO x)))
                   (\{bindx4} =>
                      io_bind (MkIO (\w =>
                                       prim_io_bind (mkForeignPrim (FFun "putStr"
                                                                         [FString]
                                                                         FUnit)
                                                                   "\n Make a move x\n"
                                                                   w)
                                                    (\x => prim__IO x)))
                              (\{bindx4} =>
                                 io_bind (MkIO (\w =>
                                                  prim__IO (prim__readString prim__stdin)))
                                         (\x3 =>
                                            eff (() :: [])
                                                (case block in dostuff (Prelude.Strings.ltrim (prim__strRev (Prelude.Strings.ltrim (prim__strRev x3)
                                                                                                                                   (Prelude.Strings.strM (prim__strRev x3)
                                                                                                                                                         (choose (not (intToBool (prim__eqString (prim__strRev x3)
                                                                                                                                                                                                 "")))))))
                                                                                              (Prelude.Strings.strM (prim__strRev (Prelude.Strings.ltrim (prim__strRev x3)
                                                                                                                                                         (Prelude.Strings.strM (prim__strRev x3)
                                                                                                                                                                               (choose (not (intToBool (prim__eqString (prim__strRev x3)
                                                                                                                                                                                                                       "")))))))
                                                                                                                    (choose (not (intToBool (prim__eqString (prim__strRev (Prelude.Strings.ltrim (prim__strRev x3)
                                                                                                                                                                                                 (Prelude.Strings.strM (prim__strRev x3)
                                                                                                                                                                                                                       (choose (not (intToBool (prim__eqString (prim__strRev x3)
                                                                                                                                                                                                                                                               "")))))))
                                                                                                                                                            ""))))))
                                                                       (parse (Prelude.Strings.ltrim (prim__strRev (Prelude.Strings.ltrim (prim__strRev x3)
                                                                                                                                          (Prelude.Strings.strM (prim__strRev x3)
                                                                                                                                                                (choose (not (intToBool (prim__eqString (prim__strRev x3)
                                                                                                                                                                                                        "")))))))
                                                                                                     (Prelude.Strings.strM (prim__strRev (Prelude.Strings.ltrim (prim__strRev x3)
                                                                                                                                                                (Prelude.Strings.strM (prim__strRev x3)
                                                                                                                                                                                      (choose (not (intToBool (prim__eqString (prim__strRev x3)
                                                                                                                                                                                                                              "")))))))
                                                                                                                           (choose (not (intToBool (prim__eqString (prim__strRev (Prelude.Strings.ltrim (prim__strRev x3)
                                                                                                                                                                                                        (Prelude.Strings.strM (prim__strRev x3)
                                                                                                                                                                                                                              (choose (not (intToBool (prim__eqString (prim__strRev x3)
                                                                                                                                                                                                                                                                      "")))))))
                                                                                                                                                                   ""))))))))
                                                (\p'5 =>
                                                   \envk =>
                                                     io_return ()))))) : IO ()
*src/Data/TicTacToe> :x run gamex
:x run gamex
Current game state ======
 _ | _ | _
-----------
 _ | _ | _
-----------
 _ | _ | _


 Make a move x
asaf
asaf
Not a valid move asaf
MkIO (\w => prim_io_return ()) : IO ()
*src/Data/TicTacToe> asaf
asaf
(input):1:1:When elaborating an application of constructor __infer:
        No such variable asaf
*src/Data/TicTacToe> asaf
asaf
(input):1:1:When elaborating an application of constructor __infer:
        No such variable asaf
*src/Data/TicTacToe> :x run gamex
:x run gamex
Current game state ======
 _ | _ | _
-----------
 _ | _ | _
-----------
 _ | _ | _


 Make a move x
ne
ne
Nice move!
MkIO (\w => prim_io_return ()) : IO ()
*src/Data/TicTacToe> :r
:r
./src/Data/TicTacToe.idr:247:15: error: not
    a terminator, expected: "$",
    "$>", "&&", "*", "+", "++", "-",
    "->", ".", "/", "/=", ":-",
    "::", ":::", ":=", ";", "<",
    "<$", "<$>", "<*>", "<+>",
    "<->", "<<", "<=", "<|>", "=",
    "==", ">", ">=", ">>", ">>=",
    "`", "||",
    ambiguous use of a left-associative operator,
    ambiguous use of a non-associative operator,
    ambiguous use of a right-associative operator,
    end of input, function argument,
    where block
  parse input of
              ^
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
./src/Data/TicTacToe.idr:245:78:
When elaborating type of Data.TicTacToe.dostuff:
When elaborating an application of type constructor Prelude.Maybe.Maybe:
        Can't unify
                Board -> Type
        with
                Type

        Specifically:
                Can't unify
                        (Vect 9 Cell) -> Type
                with
                        Type
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
./src/Data/TicTacToe.idr:245:89:
When elaborating type of Data.TicTacToe.dostuff:
When elaborating an application of Data.TicTacToe.ValidMove:
        Can't unify
                Type
        with
                Board

        Specifically:
                Can't unify
                        Type
                with
                        Vect 9 Cell
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
./src/Data/TicTacToe.idr:250:5:
When elaborating right hand side of Data.TicTacToe.case block in dostuff:
Can't unify
        Eff e () [STDIO] (\result => [STDIO])
with
        Eff IO (Maybe (ValidMove board)) [STDIO] (\result => [STDIO])

Specifically:
        Can't unify
                ()
        with
                Maybe (ValidMove board)
Metavariables: Data.TicTacToe.dostuff
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :x run gamex
:x run gamex
Current game state ======
 _ | _ | _
-----------
 _ | _ | _
-----------
 _ | _ | _


 Make a move x
ne
ne
Nice move!
MkIO (\w => prim_io_return ()) : IO ()
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
./src/Data/TicTacToe.idr:256:9:
When elaborating left hand side of dostuff:
When elaborating an application of constructor __infer:
        dostuff input does not have a function type (Eff IO
                                                         (Maybe Pos)
                                                         [STDIO]
                                                         (\result => [STDIO]))
When elaborating right hand side of gamex:
./src/Data/TicTacToe.idr:274:21:When elaborating an application of function Effects.>>=:
        dostuff (trim input) does not have a function type (Eff IO
                                                                (Maybe Pos)
                                                                [STDIO]
                                                                (\result =>
                                                                   [STDIO]))
Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.dostuff
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of Data.TicTacToe.case block in dostuff:
./src/Data/TicTacToe.idr:259:24:When elaborating an application of function Effects.pure:
        Can't unify
                Pos
        with
                Maybe (Fin 9)

        Specifically:
                Can't unify
                        Fin 9
                with
                        Maybe (Fin 9)
When elaborating right hand side of gamex:
./src/Data/TicTacToe.idr:274:21:When elaborating an application of function Effects.>>=:
        dostuff (trim input) does not have a function type (Eff IO
                                                                (Maybe Pos)
                                                                [STDIO]
                                                                (\result =>
                                                                   [STDIO]))
Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.dostuff
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of gamex:
./src/Data/TicTacToe.idr:274:21:When elaborating an application of function Effects.>>=:
        dostuff (trim input) does not have a function type (Eff IO
                                                                (Maybe Pos)
                                                                [STDIO]
                                                                (\result =>
                                                                   [STDIO]))
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :t mayb e
:t mayb e
When elaborating an application of constructor __infer:
        No such variable mayb
*src/Data/TicTacToe> :t maybe
:t maybe
Prelude.Maybe.maybe : (Lazy b) -> (a -> b) -> (Maybe a) -> b
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
./src/Data/TicTacToe.idr:270:7:
When elaborating right hand side of gamex:
When elaborating an application of function Prelude.Maybe.maybe:
        No such variable \
Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.wat
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of gamex:
./src/Data/TicTacToe.idr:279:40:When elaborating an application of function Data.TicTacToe.gamexx:
        Can't unify
                Maybe Pos
        with
                Pos

        Specifically:
                Can't unify
                        Maybe (Fin 9)
                with
                        Fin 9
Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.wat
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
Metavariables: Data.TicTacToe.wat
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of gamexx:
./src/Data/TicTacToe.idr:266:34:MoveIt pos
                                       player does not have a function type (TicTacToeRules (Vect 9
                                                                                                  Cell)
                                                                                            (Game board)
                                                                                            (\boardx =>
                                                                                               Game boardx))
Metavariables: Data.TicTacToe.gamexx
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
./src/Data/TicTacToe.idr:266:8:
When elaborating right hand side of gamexx:
Can't unify
        TicTacToeRules (Vect 9 Cell)
                       (Game board)
                       (\boardx => Game boardx)
with
        Eff IO
            ()
            [(TICTACTOE (Game board)), STDIO]
            (\result => [TICTACTOE (Game outboard), STDIO])

Specifically:
        Can't unify
                TicTacToeRules (Vect 9 Cell)
                               (Game board)
                               (\boardx => Game boardx)
        with
                Eff IO
                    ()
                    [(TICTACTOE (Game board)), STDIO]
                    (\result => [TICTACTOE (Game outboard), STDIO])
When elaborating right hand side of gamex:
./src/Data/TicTacToe.idr:279:40:When elaborating an application of function Prelude.Maybe.maybe:
        gamexx pp turn does not have a function type (Eff IO
                                                          ()
                                                          [(TICTACTOE (Game board)),
                                                           STDIO]
                                                          (\result =>
                                                             [TICTACTOE (Game outboard),
                                                              STDIO]))
Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.gamexx
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
./src/Data/TicTacToe.idr:266:8:
When elaborating right hand side of gamexx:
Can't unify
        TicTacToeRules (Vect 9 Cell)
                       (Game board)
                       (\boardx => Game boardx)
with
        Eff IO
            ()
            [(TICTACTOE (Game board)), STDIO]
            (\result => [TICTACTOE (Game outboard), STDIO])

Specifically:
        Can't unify
                TicTacToeRules (Vect 9 Cell)
                               (Game board)
                               (\boardx => Game boardx)
        with
                Eff IO
                    ()
                    [o(TICTACTOE (Game board)), STDIO]
                    (\result => [TICTACTOE (Game outboard), STDIO])
Metavariables: Data.TicTacToe.gamexx
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
./src/Data/TicTacToe.idr:266:8:
When elaborating right hand side of gamexx:
Can't unify
        TicTacToeRules (Vect 9 Cell)
                       (Game board)
                       (\boardx => Game boardx)
with
        Eff IO
            ()
            [(TICTACTOE (Game board))]
            (\result => [TICTACTOE (Game outboard)])

Specifically:
        Can't unify
                TicTacToeRules (Vect 9 Cell)
                               (Game board)
                               (\boardx => Game boardx)
        with
                Eff IO
                    ()
                    [(TICTACTOE (Game board))]
                    (\result => [TICTACTOE (Game outboard)])
Metavariables: Data.TicTacToe.gamexx
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of gamex:
./src/Data/TicTacToe.idr:279:18:When elaborating an application of function Effects.pure:
        Can't unify
                ()
        with
                Vect 9 Cell

        Specifically:
                Can't unify
                        ()
                with
                        Vect 9 Cell
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr




  C-c C-cuser interrupt
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe>
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe>
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe>
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe>
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr




  C-c C-cmake: *** [repl] Interrupt: 2

[vex:idris-talk] 2008$
[vex:idris-talk] 2008$
[vex:idris-talk] 2008$ ./sbt
./sbt
zsh: no such file or directory: ./sbt
[vex:idris-talk] 2009$ make
make
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

Type checking ./src/Data/TicTacToe.idr
  C-c C-cmake: *** [repl] Interrupt: 2

[vex:idris-talk] 2010$ make
make
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

Type checking ./src/Data/TicTacToe.idr




  C-c C-cmake: *** [repl] Interrupt: 2

[vex:idris-talk] 2011$
[vex:idris-talk] 2011$
[vex:idris-talk] 2011$ make
make
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr


  C-c C-cuser interrupt
*src/Data/TicTacToe>
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of gamex:
./src/Data/TicTacToe.idr:292:18:When elaborating an application of function Effects.pure:
        Can't unify
                Vect (S n) a
        with
                String

        Specifically:
                Can't unify
                        Vect (S n) a
                with
                        String
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
  C-c C-c  C-c C-c  C-c C-c  C-c C-c  C-c C-c  C-c C-c  C-c C-c  C-c C-cmake: *** [repl] Interrupt: 2

[vex:idris-talk] 2012$ ./.cabal-sandbox/bin/idris --help
./.cabal-sandbox/bin/idris --help
Idris version 0.9.12, (C) The Idris Community 2014
--------------------------------------------------
idris [OPTIONS] [FILE]

Common flags:
	    --install IPKG          Install package
	    --clean IPKG            Clean package
	    --build IPKG            Build package
	    --exec EXPR             Execute as idris
	    --libdir                Display library directory
	    --link                  Display link directory
	    --include               Display the includes directory
	    --nobanner              Suppress the banner
	    --color, --colour       Force coloured output
	    --nocolor, --nocolour   Disable coloured output
	    --errorcontent          Undocumented
	    --nocoverage            Undocumented
	 -o --output FILE           Specify output file
	    --check                 Undocumented
	    --total                 Require functions to be total by default
	    --partial               Undocumented
	    --warnpartial           Warn about undeclared partial functions.
	    --warn                  Undocumented
	    --typecase              Undocumented
	    --typeintype            Undocumented
	    --nobasepkgs            Undocumented
	    --noprelude             Undocumented
	    --nobuiltins            Undocumented
	 -O --level LEVEL           Undocumented
	 -i --idrispath DIR         Add directory to the list of import paths
	    --package ITEM          Undocumented
	    --ibcsubdir FILE        Write IBC files into sub directory
	    --codegen TARGET        Select code generator: C, Java, bytecode,
	                            javascript, node, or llvm
	    --mvn                   Create a maven project (for Java codegen)
	    --cpu=CPU               Select target CPU e.g. corei7 or cortex-m3
	                            (for LLVM codegen)
	    --target=TRIPLE         Select target triple (for llvm codegen)
	 -S --codegenonly           Do no further compilation of code generator output
	 -c --compileonly           Compile to object files rather than an executable
	 -X --extension EXT         Turn on langage extension (TypeProviders or ErrorReflection)
	    --dumpdefuns            Undocumented
	    --dumpcases             Undocumented
	    --log LEVEL --loglevel  Debugging log level
	    --ideslave              Undocumented
	    --client                Undocumented
	 -h --help                  Display help message
	 -v --version               Print version information
	 -V --verbose               Loud verbosity
	 -q --quiet                 Quiet verbosity

[vex:idris-talk] 2013$ make
make
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

user error (Can't find import -V)
*-V *src/Data/TicTacToe> :q
:q
Bye bye
make: *** [repl] Error 1
[vex:idris-talk] 2014$ make
make
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

Type checking ./src/Data/TicTacToe.idr
make: *** [repl] Terminated: 15
[vex:idris-talk] 2015$ make
make
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of gamex:
./src/Data/TicTacToe.idr:291:40:When elaborating an application of function Prelude.Maybe.maybe:
        gamexx pp turn does not have a function type (Eff IO
                                                          Board
                                                          [(TICTACTOE (Game board))]
                                                          (\outboard =>
                                                             [TICTACTOE (Game outboard)]))
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
./src/Data/TicTacToe.idr:223:11:
When elaborating right hand side of Default.Game someboard instance of Default.Default, method default:
Can't unify
        Game [b, b, b, b, b, b, b, b, b]
with
        Game someboard

Specifically:
        Can't unify
                [b, b, b, b, b, b, b, b, b]
        with
                someboard
Metavariables: Game someboard instance of Default.Default
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> run gamex
run gamex






















  C-c C-cuser interrupt
*src/Data/TicTacToe>
*src/Data/TicTacToe>
*src/Data/TicTacToe>
*src/Data/TicTacToe>
*src/Data/TicTacToe>
*src/Data/TicTacToe>
*src/Data/TicTacToe>
*src/Data/TicTacToe>
*src/Data/TicTacToe>
*src/Data/TicTacToe>
*src/Data/TicTacToe>
*src/Data/TicTacToe> :x run gamex
:x run gamex
Current game state ======
 _ | _ | _
-----------
 _ | _ | _
-----------
 _ | _ | _


 Make a move x
asfasf
asfasf
Not a valid move asfasf
Current game state ======
 _ | _ | _
-----------
 _ | _ | _
-----------
 _ | _ | _


 Make a move x
ne
ne
Nice move!
MkIO (\w =>
        prim_io_return [b, b, CellX, b, b, b, b, b, b]) : IO (Vect 9
                                                                   Cell)
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
./src/Data/TicTacToe.idr:294:20:
When elaborating right hand side of Data.TicTacToe.case block in gamex:
Can't unify
        Eff e () [STDIO] (\result => [STDIO])
with
        Eff IO
            (Vect 9 Cell)
            [(TICTACTOE (Game updated)), STDIO]
            (\outboard => [TICTACTOE (Game outboard), STDIO])

Specifically:
        Can't unify
                ()
        with
                Vect 9 Cell
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> 


Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe>
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
./src/Data/TicTacToe.idr:294:20:
When elaborating right hand side of Data.TicTacToe.case block in gamex:
Can't unify
        Eff e () [STDIO] (\result => [STDIO])
with
        Eff IO
            (Vect 9 Cell)
            [(TICTACTOE (Game updated)), STDIO]
            (\outboard => [TICTACTOE (Game outboard), STDIO])

Specifically:
        Can't unify
                ()
        with
                Vect 9 Cell
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :R
:R
(input):1:1: error: expected: end of input,
    operator
:R<EOF>
^
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of Data.TicTacToe.case block in case block in gamex:
./src/Data/TicTacToe.idr:299:39:When elaborating an application of function Effects.>>=:
        Can't unify
                Eff e () [STDIO] (\result => [STDIO])
        with
                Eff IO a [(TICTACTOE (Game updated)), STDIO] xs'

        Specifically:
                Can't unify
                        ()
                with
                        Game updated
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of Data.TicTacToe.case block in case block in gamex:
./src/Data/TicTacToe.idr:300:39:When elaborating an application of function Effects.>>=:
        Can't unify
                Eff e () [STDIO] (\result => [STDIO])
        with
                Eff IO a [(TICTACTOE (Game updated)), STDIO] xs'

        Specifically:
                Can't unify
                        ()
                with
                        Game updated
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of Data.TicTacToe.case block in case block in gamex:
./src/Data/TicTacToe.idr:300:39:When elaborating an application of function Effects.>>=:
        Can't unify
                Eff e () [STDIO] (\result => [STDIO])
        with
                Eff IO a [(TICTACTOE (Game updated)), STDIO] xs'

        Specifically:
                Can't unify
                        ()
                with
                        Game updated
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> 
:r

Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
./src/Data/TicTacToe.idr:292:64: error: not
    a terminator, expected: "$",
    "$>", "&&", "*", "+", "++", "-",
    "->", ".", "/", "/=", ":-",
    "::", ":::", ":=", ";", "<",
    "<$", "<$>", "<*>", "<+>",
    "<->", "<<", "<=", "<|>", "=",
    "==", ">", ">=", ">>", ">>=",
    "`", "||",
    ambiguous use of a left-associative operator,
    ambiguous use of a non-associative operator,
    ambiguous use of a right-associative operator,
    end of input, function argument
            maybe gamex (\pp => processIt pp turn current) pos where
                                                               ^
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
Metavariables: Data.TicTacToe.checkingstuff
*src/Data/TicTacToe> :r
:r
./src/Data/TicTacToe.idr:305:48: error: expected: "$",
    "$>", "&&", "*", "+", "++", "-",
    "->", ".", "/", "/=", ":-",
    "::", ":::", ":=", ";", "<",
    "<$", "<$>", "<*>", "<+>",
    "<->", "<<", "<=", "<|>", "=",
    "==", ">", ">=", ">>", ">>=",
    "`", "||",
    ambiguous use of a left-associative operator,
    ambiguous use of a non-associative operator,
    ambiguous use of a right-associative operator,
    declaration, end of input,
    function argument, where block
                                     pure "foo") pos
                                               ^
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :r
:r
./src/Data/TicTacToe.idr:305:52: error: expected: "$",
    "$>", "&&", "*", "+", "++", "-",
    "->", ".", "/", "/=", ":-",
    "::", ":::", ":=", ";", "<",
    "<$", "<$>", "<*>", "<+>",
    "<->", "<<", "<=", "<|>", "=",
    "==", ">", ">=", ">>", ">>=",
    "`", "||",
    ambiguous use of a left-associative operator,
    ambiguous use of a non-associative operator,
    ambiguous use of a right-associative operator,
    declaration, end of input,
    function argument, where block
                                       pure updated) pos
                                                   ^
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of Data.TicTacToe.gamex, processIt:
./src/Data/TicTacToe.idr:298:21:When elaborating an application of function Effects.>>=:
        Can't unify
                Eff IO
                    Board
                    [(TICTACTOE (Game board))]
                    (\outboard => [TICTACTOE (Game outboard)])
        with
                Eff IO a [(TICTACTOE (Game current)), STDIO] xs'

        Specifically:
                Can't unify
                        []
                with
                        [STDIO]
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of Data.TicTacToe.gamex, processIt:
./src/Data/TicTacToe.idr:298:21:When elaborating an application of function Effects.>>=:
        Can't unify
                Eff IO
                    Board
                    [(TICTACTOE (Game board))]
                    (\outboard => [TICTACTOE (Game outboard)])
        with
                Eff IO a [(TICTACTOE (Game current)), STDIO] xs'

        Specifically:
                Can't unify
                        []
                with
                        [STDIO]
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of Data.TicTacToe.gamex, processIt:
./src/Data/TicTacToe.idr:298:28:When elaborating an application of function Data.TicTacToe.gamexx:
        No such variable pp
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
When elaborating right hand side of Data.TicTacToe.gamex, processIt:
./src/Data/TicTacToe.idr:298:32:When elaborating an application of function Data.TicTacToe.gamexx:
        No such variable turn
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
Prelude.(!!): index too large

Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
Prelude.(!!): index too large

Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
Prelude.(!!): index too large

Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
Prelude.(!!): index too large

Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
./src/Data/TicTacToe.idr:21:1: error: expected: declaration,
    end of input
%unifyLog
^
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :r
:r
./src/Data/TicTacToe.idr:22:1: error: expected: declaration,
    end of input
%unifyLog
^
Type checking ./src/Data/TicTacToe.idr
*src/Data/TicTacToe> :R
:R
(input):1:1: error: expected: end of input,
    operator
:R<EOF>
^
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:24:6
Implicit Data.TicTacToe.Player []
---> Type c4
Implicit Data.TicTacToe.PlayerX []
./src/Data/TicTacToe.idr:24:23:Constructor Data.TicTacToe.PlayerX : Player
Rechecking Data.TicTacToe.Player
---> Data.TicTacToe.PlayerX : Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Implicit Data.TicTacToe.PlayerO []
./src/Data/TicTacToe.idr:25:1:Constructor Data.TicTacToe.PlayerO : Player
Rechecking Data.TicTacToe.Player
---> Data.TicTacToe.PlayerO : Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Parameters : []
Constructor Data.TicTacToe.PlayerX is Total
Constructor Data.TicTacToe.PlayerO is Total
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:25:6
Implicit Data.TicTacToe.Cell []
---> Type e4
Implicit Data.TicTacToe.CellX []
./src/Data/TicTacToe.idr:25:19:Constructor Data.TicTacToe.CellX : Cell
Rechecking Data.TicTacToe.Cell
---> Data.TicTacToe.CellX : Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Implicit Data.TicTacToe.CellO []
./src/Data/TicTacToe.idr:25:27:Constructor Data.TicTacToe.CellO : Cell
Rechecking Data.TicTacToe.Cell
---> Data.TicTacToe.CellO : Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Implicit Data.TicTacToe.b []
./src/Data/TicTacToe.idr:27:1:Constructor Data.TicTacToe.b : Cell
Rechecking Data.TicTacToe.Cell
---> Data.TicTacToe.b : Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Parameters : []
Constructor Data.TicTacToe.CellX is Total
Constructor Data.TicTacToe.CellO is Total
Constructor Data.TicTacToe.b is Total
Elaborating instance Show
Cell instance of Prelude.Show pre-type Show Cell
Implicit Cell instance of Prelude.Show []
Cell instance of Prelude.Show type Prelude.Show Data.TicTacToe.Cell
Rechecking
Rechecked to Prelude.Show Data.TicTacToe.Cell
([(Prelude.method show,[PartialFn],Cell -> String,Cell -> String)],[(a,Cell)])
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
Method types tydecl Prelude.!show : (__pi_arg : Cell) ->
String
Instance is [Cell] implicits []
Instance LHS Cell instance of Prelude.Show
Instance RHS constructor of Prelude.Show (\{meth0} => method show meth)
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
LHS: ./src/Data/TicTacToe.idr:27:10 Cell instance of Prelude.Show
Fixed parameters: [] from Cell instance of Prelude.Show
(Prelude.Show Data.TicTacToe.Cell,[])
Elaborated: Cell instance of Prelude.Show
Elaborated type: Prelude.Show Data.TicTacToe.Cell
Injective: Cell instance of Prelude.Show []
Normalised LHS: Cell instance of Prelude.Show
Checked Cell instance of Prelude.Show
Prelude.Show Data.TicTacToe.Cell
Where block:
 [tydecl Prelude.@Prelude.Show$Cell:!show:0 : Cell -> String,pat Prelude.@Prelude.Show$Cell:!show:0 	   Cell instance of Prelude.Show, method show CellX  = "x" where []
                                           Cell instance of Prelude.Show, method show CellO  = "o" where []
                                           Cell instance of Prelude.Show, method show b  = "_" where []]
[]
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Prelude.Cell instance of Prelude.Show, method show pre-type (__pi_arg : Cell) ->
String
Implicit Prelude.Cell instance of Prelude.Show, method show [PExp {priority = 1, argopts = [], getTm = _}]
Prelude.Cell instance of Prelude.Show, method show type (__pi_arg : Data.TicTacToe.Cell) ->
String
Rechecking
Rechecked to Data.TicTacToe.Cell -> String
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
LHS: ./src/Data/TicTacToe.idr:28:8 Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellX
Fixed parameters: [] from Cell instance of Prelude.Show, method show CellX
(Data.TicTacToe.Cell -> String,[PExp {priority = 1, argopts = [], getTm = _}])
Elaborated: Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellX
Elaborated type: String
Injective: Prelude.Cell instance of Prelude.Show, method show []
Normalised LHS: Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellX
Checked Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellX
String
Where block:
 []
[]
"x"
RHS: "x"
STARTING CHECK
DONE CHECK
---> "x"
Rechecking
LHS: ./src/Data/TicTacToe.idr:29:8 Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellO
Fixed parameters: [] from Cell instance of Prelude.Show, method show CellO
(Data.TicTacToe.Cell -> String,[PExp {priority = 1, argopts = [], getTm = _}])
Elaborated: Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellO
Elaborated type: String
Injective: Prelude.Cell instance of Prelude.Show, method show []
Normalised LHS: Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellO
Checked Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellO
String
Where block:
 []
[]
"o"
RHS: "o"
STARTING CHECK
DONE CHECK
---> "o"
Rechecking
LHS: ./src/Data/TicTacToe.idr:30:8 Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.b
Fixed parameters: [] from Cell instance of Prelude.Show, method show b
(Data.TicTacToe.Cell -> String,[PExp {priority = 1, argopts = [], getTm = _}])
Elaborated: Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.b
Elaborated type: String
Injective: Prelude.Cell instance of Prelude.Show, method show []
Normalised LHS: Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.b
Checked Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.b
String
Where block:
 []
[]
"_"
RHS: "_"
STARTING CHECK
DONE CHECK
---> "_"
Rechecking
Elaborated patterns:
[Right (Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellX,"x"),Right (Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellO,"o"),Right (Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.b,"_")]
Checking collapsibility of (String,Data.TicTacToe.Cell -> String)
Initial typechecked patterns:
[Right (Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellX,"x"),Right (Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellO,"o"),Right (Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.b,"_")]
Initial typechecked pattern def:
[([],Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellX,"x"),([],Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellO,"o"),([],Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.b,"_")]
After data structure transformations:
[([],Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellX,"x"),([],Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellO,"o"),([],Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.b,"_")]
CaseDef [{e0}] case {e0} of
    Data.TicTacToe.CellO() => "o"
    Data.TicTacToe.CellX() => "x"
    Data.TicTacToe.b() => "_"
    _ => error "Error" []
Optimised: CaseDef [{e0}] case {e0} of
    Data.TicTacToe.CellO() => "o"
    Data.TicTacToe.CellX() => "x"
    Data.TicTacToe.b() => "_"
    _ => error "Error" []
Called names: CGInfo {argsdef = [{e0}], calls = [], scg = [], argsused = [{e0}], unusedpos = []}
constructor of Prelude.Show (\{meth0} =>
Prelude.Cell instance of Prelude.Show, method show meth)
RHS: constructor of Prelude.Show {a = _}
(\{meth0} =>
Prelude.Cell instance of Prelude.Show, method show meth)
STARTING CHECK
DONE CHECK
---> constructor of Prelude.Show Data.TicTacToe.Cell (\ {meth0} : Data.TicTacToe.Cell => Prelude.Cell instance of Prelude.Show, method show {meth0})
Rechecking
Elaborated patterns:
[Right (Cell instance of Prelude.Show,constructor of Prelude.Show Data.TicTacToe.Cell (\ {meth0} : Data.TicTacToe.Cell => Prelude.Cell instance of Prelude.Show, method show {meth0}))]
Checking collapsibility of (Prelude.Show,Prelude.Show Data.TicTacToe.Cell)
Initial typechecked patterns:
[Right (Cell instance of Prelude.Show,constructor of Prelude.Show Data.TicTacToe.Cell (\ {meth0} : Data.TicTacToe.Cell => Prelude.Cell instance of Prelude.Show, method show {meth0}))]
Initial typechecked pattern def:
[([],Cell instance of Prelude.Show,constructor of Prelude.Show Data.TicTacToe.Cell (\ {meth0} : Data.TicTacToe.Cell => Prelude.Cell instance of Prelude.Show, method show {meth0}))]
After data structure transformations:
[([],Cell instance of Prelude.Show,\ {meth0} : [__] => Prelude.Cell instance of Prelude.Show, method show {meth0})]
CaseDef [] constructor of Prelude.Show Data.TicTacToe.Cell (\ {meth0} : Data.TicTacToe.Cell => Prelude.Cell instance of Prelude.Show, method show {meth0}) []
Optimised: CaseDef [{meth0}] Prelude.Cell instance of Prelude.Show, method show {meth0} []
Called names: CGInfo {argsdef = [{meth0}], calls = [(Prelude.Cell instance of Prelude.Show, method show,[[{meth0}]])], scg = [], argsused = [], unusedpos = []}
Simplifying <<{__Unit0} eliminator>>
Simplifying __elimTy
Simplifying elim
Simplifying Prelude.Cell instance of Prelude.Show, method show
Simplifying Cell instance of Prelude.Show
Building SCG for <<{__Unit0} eliminator>> from
[Right (pat prop : {__Unit0} -> Type u. pat elim___II00 : prop {__II0}. <<{__Unit0} eliminator>> prop elim___II00 {__II0},pat prop : {__Unit0} -> Type x. pat elim___II00 : prop {__II0}. elim___II00)]
case {e2} of
    {__II0}() => {e1}
[]
Building SCG for __elimTy from
[Right (pat {scrutineeType505} : Type e3. pat {meth0} : Type g3. pat {meth1} : {meth0}. __elimTy {scrutineeType505} (constructor of __Elim {scrutineeType505} {meth0} {meth1}),pat {scrutineeType505} : Type i3. pat {meth0} : Type k3. pat {meth1} : {meth0}. {meth0})]
case {e1} of
    constructor of __Elim({e2}, {e3}, {e4}) => {e3}
[]
Building SCG for elim from
[Right (pat {scrutineeType505} : Type u3. pat {meth0} : Type w3. pat {meth1} : {meth0}. elim {scrutineeType505} (constructor of __Elim {scrutineeType505} {meth0} {meth1}),pat {scrutineeType505} : Type y3. pat {meth0} : Type a4. pat {meth1} : {meth0}. {meth1})]
case {e1} of
    constructor of __Elim({e2}, {e3}, {e4}) => {e4}
[]
Building SCG for Prelude.Cell instance of Prelude.Show, method show from
[Right (Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellX,"x"),Right (Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.CellO,"o"),Right (Prelude.Cell instance of Prelude.Show, method show Data.TicTacToe.b,"_")]
case {e0} of
    Data.TicTacToe.CellO() => "o"
    Data.TicTacToe.CellX() => "x"
    Data.TicTacToe.b() => "_"
[]
Building SCG for Cell instance of Prelude.Show from
[Right (Cell instance of Prelude.Show,constructor of Prelude.Show Data.TicTacToe.Cell (\ {meth0} : Data.TicTacToe.Cell => Prelude.Cell instance of Prelude.Show, method show {meth0}))]
constructor of Prelude.Show Data.TicTacToe.Cell (\ {meth0} : Data.TicTacToe.Cell => Prelude.Cell instance of Prelude.Show, method show {meth0})
[(constructor of Prelude.Show,[Nothing,Nothing]),(Data.TicTacToe.Cell,[]),(Prelude.Cell instance of Prelude.Show, method show,[Nothing])]
Checking <<{__Unit0} eliminator>> for totality
Checking __elimTy for totality
Checking elim for totality
Checking Prelude.Cell instance of Prelude.Show, method show for totality
Multipath for Prelude.Cell instance of Prelude.Show, method show:
from []
1
[]
Generated 1 paths
Checking Cell instance of Prelude.Show for totality
Multipath for Cell instance of Prelude.Show:
from [(constructor of Prelude.Show,[Nothing,Nothing]),(Data.TicTacToe.Cell,[]),(Prelude.Cell instance of Prelude.Show, method show,[Nothing])]
3
[(constructor of Prelude.Show,[Nothing,Nothing])]
[(Data.TicTacToe.Cell,[])]
[(Prelude.Cell instance of Prelude.Show, method show,[Nothing])]
Generated 3 paths
Elaborating instance Show
Player instance of Prelude.Show pre-type Show Player
Implicit Player instance of Prelude.Show []
Player instance of Prelude.Show type Prelude.Show Data.TicTacToe.Player
Rechecking
Rechecked to Prelude.Show Data.TicTacToe.Player
([(Prelude.method show,[PartialFn],Player -> String,Player -> String)],[(a,Player)])
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
Method types tydecl Prelude.!show : (__pi_arg : Player) ->
String
Instance is [Player] implicits []
Instance LHS Player instance of Prelude.Show
Instance RHS constructor of Prelude.Show (\{meth0} => method show meth)
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
LHS: ./src/Data/TicTacToe.idr:32:10 Player instance of Prelude.Show
Fixed parameters: [] from Player instance of Prelude.Show
(Prelude.Show Data.TicTacToe.Player,[])
Elaborated: Player instance of Prelude.Show
Elaborated type: Prelude.Show Data.TicTacToe.Player
Injective: Player instance of Prelude.Show []
Normalised LHS: Player instance of Prelude.Show
Checked Player instance of Prelude.Show
Prelude.Show Data.TicTacToe.Player
Where block:
 [tydecl Prelude.@Prelude.Show$Player:!show:0 : Player -> String,pat Prelude.@Prelude.Show$Player:!show:0 	   Player instance of Prelude.Show, method show PlayerX  = "x" where []
                                             Player instance of Prelude.Show, method show PlayerO  = "o" where []]
[]
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Prelude.Player instance of Prelude.Show, method show pre-type (__pi_arg : Player) ->
String
Implicit Prelude.Player instance of Prelude.Show, method show [PExp {priority = 1, argopts = [], getTm = _}]
Prelude.Player instance of Prelude.Show, method show type (__pi_arg : Data.TicTacToe.Player) ->
String
Rechecking
Rechecked to Data.TicTacToe.Player -> String
Elaborating clause Prelude.Player instance of Prelude.Show, method show
LHS: ./src/Data/TicTacToe.idr:33:8 Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerX
Fixed parameters: [] from Player instance of Prelude.Show, method show PlayerX
(Data.TicTacToe.Player -> String,[PExp {priority = 1, argopts = [], getTm = _}])
Elaborated: Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerX
Elaborated type: String
Injective: Prelude.Player instance of Prelude.Show, method show []
Normalised LHS: Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerX
Checked Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerX
String
Where block:
 []
[]
"x"
RHS: "x"
STARTING CHECK
DONE CHECK
---> "x"
Rechecking
LHS: ./src/Data/TicTacToe.idr:34:8 Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerO
Fixed parameters: [] from Player instance of Prelude.Show, method show PlayerO
(Data.TicTacToe.Player -> String,[PExp {priority = 1, argopts = [], getTm = _}])
Elaborated: Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerO
Elaborated type: String
Injective: Prelude.Player instance of Prelude.Show, method show []
Normalised LHS: Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerO
Checked Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerO
String
Where block:
 []
[]
"o"
RHS: "o"
STARTING CHECK
DONE CHECK
---> "o"
Rechecking
Elaborated patterns:
[Right (Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerX,"x"),Right (Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerO,"o")]
Checking collapsibility of (String,Data.TicTacToe.Player -> String)
Initial typechecked patterns:
[Right (Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerX,"x"),Right (Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerO,"o")]
Initial typechecked pattern def:
[([],Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerX,"x"),([],Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerO,"o")]
After data structure transformations:
[([],Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerX,"x"),([],Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerO,"o")]
CaseDef [{e0}] case {e0} of
    Data.TicTacToe.PlayerO() => "o"
    Data.TicTacToe.PlayerX() => "x"
    _ => error "Error" []
Optimised: CaseDef [{e0}] case {e0} of
    Data.TicTacToe.PlayerO() => "o"
    Data.TicTacToe.PlayerX() => "x"
    _ => error "Error" []
Called names: CGInfo {argsdef = [{e0}], calls = [], scg = [], argsused = [{e0}], unusedpos = []}
constructor of Prelude.Show (\{meth0} =>
Prelude.Player instance of Prelude.Show, method show meth)
RHS: constructor of Prelude.Show {a = _}
(\{meth0} =>
Prelude.Player instance of Prelude.Show, method show meth)
STARTING CHECK
DONE CHECK
---> constructor of Prelude.Show Data.TicTacToe.Player (\ {meth0} : Data.TicTacToe.Player => Prelude.Player instance of Prelude.Show, method show {meth0})
Rechecking
Elaborated patterns:
[Right (Player instance of Prelude.Show,constructor of Prelude.Show Data.TicTacToe.Player (\ {meth0} : Data.TicTacToe.Player => Prelude.Player instance of Prelude.Show, method show {meth0}))]
Checking collapsibility of (Prelude.Show,Prelude.Show Data.TicTacToe.Player)
Initial typechecked patterns:
[Right (Player instance of Prelude.Show,constructor of Prelude.Show Data.TicTacToe.Player (\ {meth0} : Data.TicTacToe.Player => Prelude.Player instance of Prelude.Show, method show {meth0}))]
Initial typechecked pattern def:
[([],Player instance of Prelude.Show,constructor of Prelude.Show Data.TicTacToe.Player (\ {meth0} : Data.TicTacToe.Player => Prelude.Player instance of Prelude.Show, method show {meth0}))]
After data structure transformations:
[([],Player instance of Prelude.Show,\ {meth0} : [__] => Prelude.Player instance of Prelude.Show, method show {meth0})]
CaseDef [] constructor of Prelude.Show Data.TicTacToe.Player (\ {meth0} : Data.TicTacToe.Player => Prelude.Player instance of Prelude.Show, method show {meth0}) []
Optimised: CaseDef [{meth0}] Prelude.Player instance of Prelude.Show, method show {meth0} []
Called names: CGInfo {argsdef = [{meth0}], calls = [(Prelude.Player instance of Prelude.Show, method show,[[{meth0}]])], scg = [], argsused = [], unusedpos = []}
Simplifying Prelude.Player instance of Prelude.Show, method show
Simplifying Player instance of Prelude.Show
Building SCG for Prelude.Player instance of Prelude.Show, method show from
[Right (Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerX,"x"),Right (Prelude.Player instance of Prelude.Show, method show Data.TicTacToe.PlayerO,"o")]
case {e0} of
    Data.TicTacToe.PlayerO() => "o"
    Data.TicTacToe.PlayerX() => "x"
[]
Building SCG for Player instance of Prelude.Show from
[Right (Player instance of Prelude.Show,constructor of Prelude.Show Data.TicTacToe.Player (\ {meth0} : Data.TicTacToe.Player => Prelude.Player instance of Prelude.Show, method show {meth0}))]
constructor of Prelude.Show Data.TicTacToe.Player (\ {meth0} : Data.TicTacToe.Player => Prelude.Player instance of Prelude.Show, method show {meth0})
[(constructor of Prelude.Show,[Nothing,Nothing]),(Data.TicTacToe.Player,[]),(Prelude.Player instance of Prelude.Show, method show,[Nothing])]
Checking Prelude.Player instance of Prelude.Show, method show for totality
Multipath for Prelude.Player instance of Prelude.Show, method show:
from []
1
[]
Generated 1 paths
Checking Player instance of Prelude.Show for totality
Multipath for Player instance of Prelude.Show:
from [(constructor of Prelude.Show,[Nothing,Nothing]),(Data.TicTacToe.Player,[]),(Prelude.Player instance of Prelude.Show, method show,[Nothing])]
3
[(constructor of Prelude.Show,[Nothing,Nothing])]
[(Data.TicTacToe.Player,[])]
[(Prelude.Player instance of Prelude.Show, method show,[Nothing])]
Generated 3 paths
Elaborating type decl Data.TicTacToe.Pos[]
Data.TicTacToe.Pos pre-type Type
Implicit Data.TicTacToe.Pos []
Data.TicTacToe.Pos type Type
Rechecking
Rechecked to Type k4
Elaborating clause Data.TicTacToe.Pos
LHS: ./src/Data/TicTacToe.idr:37:5 Data.TicTacToe.Pos
Fixed parameters: [] from Pos
(Type m4,[])
Elaborated: Data.TicTacToe.Pos
Elaborated type: Type m4
Injective: Data.TicTacToe.Pos []
Normalised LHS: Data.TicTacToe.Pos
Checked Data.TicTacToe.Pos
Type m4
Where block:
 []
[]
Fin (|fromInteger 9 , 9 , 9 , 9 , 9 , 9 , 9 , |)
RHS: Prelude.Fin.Fin (|(|Prelude.Classes.fromInteger {a = _}
{{resolvetc}}
9 , Prelude.Fin.fromInteger {n = _}
9
{auto prf = Prelude.Fin.ItIsJust {a = _}
{x = _}} , |) , 9 , 9 , 9 , 9 , 9 , 9 , |)
STARTING CHECK
DONE CHECK
---> Prelude.Fin.Fin (Prelude.Classes.fromInteger Prelude.Nat.Nat Nat instance of Prelude.Classes.Num 9)
Rechecking
Elaborated patterns:
[Right (Data.TicTacToe.Pos,Prelude.Fin.Fin (Prelude.Classes.fromInteger Prelude.Nat.Nat Nat instance of Prelude.Classes.Num 9))]
Checking collapsibility of (Type m4,Type m4)
Initial typechecked patterns:
[Right (Data.TicTacToe.Pos,Prelude.Fin.Fin (Prelude.Classes.fromInteger Prelude.Nat.Nat Nat instance of Prelude.Classes.Num 9))]
Initial typechecked pattern def:
[([],Data.TicTacToe.Pos,Prelude.Fin.Fin (Prelude.Classes.fromInteger Prelude.Nat.Nat Nat instance of Prelude.Classes.Num 9))]
After data structure transformations:
[([],Data.TicTacToe.Pos,Prelude.Fin.Fin 9)]
CaseDef [] Prelude.Fin.Fin (Prelude.Classes.fromInteger Prelude.Nat.Nat Nat instance of Prelude.Classes.Num 9) []
Optimised: CaseDef [] Prelude.Fin.Fin 9 []
Called names: CGInfo {argsdef = [], calls = [], scg = [], argsused = [], unusedpos = []}
Simplifying Data.TicTacToe.Pos
Building SCG for Data.TicTacToe.Pos from
[Right (Data.TicTacToe.Pos,Prelude.Fin.Fin (Prelude.Nat.fromIntegerNat 9))]
Prelude.Fin.Fin (Prelude.Nat.fromIntegerNat 9)
[(Prelude.Fin.Fin,[Nothing]),(Prelude.Nat.fromIntegerNat,[Nothing])]
Checking Data.TicTacToe.Pos for totality
Multipath for Data.TicTacToe.Pos:
from [(Prelude.Fin.Fin,[Nothing]),(Prelude.Nat.fromIntegerNat,[Nothing])]
2
[(Prelude.Fin.Fin,[Nothing])]
[(Prelude.Nat.fromIntegerNat,[Nothing])]
Generated 2 paths
Elaborating type decl Data.TicTacToe.Board[]
Data.TicTacToe.Board pre-type Type
Implicit Data.TicTacToe.Board []
Data.TicTacToe.Board type Type
Rechecking
Rechecked to Type o4
Elaborating clause Data.TicTacToe.Board
LHS: ./src/Data/TicTacToe.idr:40:7 Data.TicTacToe.Board
Fixed parameters: [] from Board
(Type q4,[])
Elaborated: Data.TicTacToe.Board
Elaborated type: Type q4
Injective: Data.TicTacToe.Board []
Normalised LHS: Data.TicTacToe.Board
Checked Data.TicTacToe.Board
Type q4
Where block:
 []
[]
Vect (|fromInteger 9 , 9 , 9 , 9 , 9 , 9 , 9 , |)
Cell
RHS: Prelude.Vect.Vect (|(|Prelude.Classes.fromInteger {a = _}
{{resolvetc}}
9 , Prelude.Fin.fromInteger {n = _}
9
{auto prf = Prelude.Fin.ItIsJust {a = _}
{x = _}} , |) , 9 , 9 , 9 , 9 , 9 , 9 , |)
Data.TicTacToe.Cell
STARTING CHECK
DONE CHECK
---> Prelude.Vect.Vect (Prelude.Classes.fromInteger Prelude.Nat.Nat Nat instance of Prelude.Classes.Num 9) Data.TicTacToe.Cell
Rechecking
Elaborated patterns:
[Right (Data.TicTacToe.Board,Prelude.Vect.Vect (Prelude.Classes.fromInteger Prelude.Nat.Nat Nat instance of Prelude.Classes.Num 9) Data.TicTacToe.Cell)]
Checking collapsibility of (Type q4,Type q4)
Initial typechecked patterns:
[Right (Data.TicTacToe.Board,Prelude.Vect.Vect (Prelude.Classes.fromInteger Prelude.Nat.Nat Nat instance of Prelude.Classes.Num 9) Data.TicTacToe.Cell)]
Initial typechecked pattern def:
[([],Data.TicTacToe.Board,Prelude.Vect.Vect (Prelude.Classes.fromInteger Prelude.Nat.Nat Nat instance of Prelude.Classes.Num 9) Data.TicTacToe.Cell)]
After data structure transformations:
[([],Data.TicTacToe.Board,Prelude.Vect.Vect 9 Data.TicTacToe.Cell)]
CaseDef [] Prelude.Vect.Vect (Prelude.Classes.fromInteger Prelude.Nat.Nat Nat instance of Prelude.Classes.Num 9) Data.TicTacToe.Cell []
Optimised: CaseDef [] Prelude.Vect.Vect 9 Data.TicTacToe.Cell []
Called names: CGInfo {argsdef = [], calls = [], scg = [], argsused = [], unusedpos = []}
Simplifying Data.TicTacToe.Board
Building SCG for Data.TicTacToe.Board from
[Right (Data.TicTacToe.Board,Prelude.Vect.Vect (Prelude.Nat.fromIntegerNat 9) Data.TicTacToe.Cell)]
Prelude.Vect.Vect (Prelude.Nat.fromIntegerNat 9) Data.TicTacToe.Cell
[(Prelude.Vect.Vect,[Nothing,Nothing]),(Prelude.Nat.fromIntegerNat,[Nothing]),(Data.TicTacToe.Cell,[])]
Checking Data.TicTacToe.Board for totality
Multipath for Data.TicTacToe.Board:
from [(Prelude.Vect.Vect,[Nothing,Nothing]),(Prelude.Nat.fromIntegerNat,[Nothing]),(Data.TicTacToe.Cell,[])]
3
[(Prelude.Vect.Vect,[Nothing,Nothing])]
[(Prelude.Nat.fromIntegerNat,[Nothing])]
[(Data.TicTacToe.Cell,[])]
Generated 3 paths
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:42:6
Implicit Data.TicTacToe.PrettyBoard []
---> Type s4
Implicit Data.TicTacToe.PBoard [PExp {priority = 1, argopts = [], getTm = _}]
./src/Data/TicTacToe.idr:42:27:Constructor Data.TicTacToe.PBoard : Board -> PrettyBoard
Rechecking Data.TicTacToe.Board -> Data.TicTacToe.PrettyBoard
---> Data.TicTacToe.PBoard : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Parameters : []
Constructor Data.TicTacToe.PBoard is Total
Elaborating instance Show
PrettyBoard instance of Prelude.Show pre-type Show PrettyBoard
Implicit PrettyBoard instance of Prelude.Show []
PrettyBoard instance of Prelude.Show type Prelude.Show Data.TicTacToe.PrettyBoard
Rechecking
Rechecked to Prelude.Show Data.TicTacToe.PrettyBoard
([(Prelude.method show,[PartialFn],PrettyBoard -> String,PrettyBoard -> String)],[(a,PrettyBoard)])
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
Method types tydecl Prelude.!show : (__pi_arg : PrettyBoard) ->
String
Instance is [PrettyBoard] implicits []
Instance LHS PrettyBoard instance of Prelude.Show
Instance RHS constructor of Prelude.Show (\{meth0} => method show meth)
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
LHS: ./src/Data/TicTacToe.idr:44:10 PrettyBoard instance of Prelude.Show
Fixed parameters: [] from PrettyBoard instance of Prelude.Show
(Prelude.Show Data.TicTacToe.PrettyBoard,[])
Elaborated: PrettyBoard instance of Prelude.Show
Elaborated type: Prelude.Show Data.TicTacToe.PrettyBoard
Injective: PrettyBoard instance of Prelude.Show []
Normalised LHS: PrettyBoard instance of Prelude.Show
Checked PrettyBoard instance of Prelude.Show
Prelude.Show Data.TicTacToe.PrettyBoard
Where block:
 [tydecl Prelude.@Prelude.Show$PrettyBoard:!show:0 : PrettyBoard -> String,pat Prelude.@Prelude.Show$PrettyBoard:!show:0 	   PrettyBoard instance of Prelude.Show, method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
[]
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Prelude.PrettyBoard instance of Prelude.Show, method show pre-type (__pi_arg : PrettyBoard) ->
String
Implicit Prelude.PrettyBoard instance of Prelude.Show, method show [PExp {priority = 1, argopts = [], getTm = _}]
Prelude.PrettyBoard instance of Prelude.Show, method show type (__pi_arg : Data.TicTacToe.PrettyBoard) ->
String
Rechecking
Rechecked to Data.TicTacToe.PrettyBoard -> String
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
LHS: ./src/Data/TicTacToe.idr:45:8 Prelude.PrettyBoard instance of Prelude.Show, method show (Data.TicTacToe.PBoard (|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
nw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
n
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
ne
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
w
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , Prelude.List.:: {a = _}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , |) , Prelude.List.:: {a = _}
w
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , Prelude.List.:: {a = _}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
w
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , Prelude.List.:: {a = _}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
w
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , Prelude.List.:: {a = _}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.List.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Stream.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , |) , |) , Prelude.Stream.:: {a = _}
c
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
e
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Vect.:: {a = _}
{n = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , |) , Prelude.List.:: {a = _}
sw
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.List.:: {a = _}
s
(|Effects.Env.:: {eff = _}
{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Vect.:: {a = _}
{n = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , |) , Prelude.Stream.:: {a = _}
s
(|Effects.Env.:: {eff = _}
  C-c C-c{m = _}
{a = _}
{xs = _}
{{resolvetc}}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.List.:: {a = _}
se
(|Effects.Env.Nil {m = _} , Prelude.List.Nil {a = _} , Prelude.Vect.Nil {a = _} , |) , Prelude.Stream.:: {a = _}
make: *** [repl] Interrupt: 2

[vex:idris-talk] 2016$ ./sbt
./sbt
zsh: no such file or directory: ./sbt
[vex:idris-talk] 2017$make repl
make repl
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:24:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:25:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:42:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:141:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:158:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:200:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
Elaborating type decl Data.TicTacToe.gamex, processIt[]
Elaborating clause Data.TicTacToe.gamex, processIt
idris: Prelude.(!!): index too large

make: *** [repl] Error 1
[vex:idris-talk] 2018$ :r
:r
zsh: command not found: :r
[vex:idris-talk] 2019$ make
make
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:24:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:25:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:42:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:141:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:158:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:200:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
idris: Prelude.(!!): index too large

make: *** [repl] Error 1
[vex:idris-talk] 2020$ :r
:r
zsh: command not found: :r
[vex:idris-talk] 2021$ make
make
     ____    __     _
    /  _/___/ /____(_)____
    / // __  / ___/ / ___/     Version 0.9.12
  _/ // /_/ / /  / (__  )      http://www.idris-lang.org/
 /___/\__,_/_/  /_/____/       Type :? for help

Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:24:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:25:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:42:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:141:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:158:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:200:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
Elaborating type decl Data.TicTacToe.go[]
Elaborating clause Data.TicTacToe.go
Totality checking
Totality checking [(:0:0,<<{__Unit0} eliminator>>),(builtin:0:0,__elimTy),(builtin:0:0,elim),(./src/Data/TicTacToe.idr:28:3,Prelude.Cell instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:27:10,Cell instance of Prelude.Show),(./src/Data/TicTacToe.idr:33:3,Prelude.Player instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:32:10,Player instance of Prelude.Show),(./src/Data/TicTacToe.idr:37:1,Data.TicTacToe.Pos),(./src/Data/TicTacToe.idr:40:1,Data.TicTacToe.Board),(./src/Data/TicTacToe.idr:45:3,Prelude.PrettyBoard instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:44:10,PrettyBoard instance of Prelude.Show),(./src/Data/TicTacToe.idr:58:1,Data.TicTacToe.toCell),(./src/Data/TicTacToe.idr:62:3,Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:61:10,Player instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:68:3,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:67:10,Cell instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:80:1,Data.TicTacToe.nw),(./src/Data/TicTacToe.idr:83:1,Data.TicTacToe.n),(./src/Data/TicTacToe.idr:86:1,Data.TicTacToe.ne),(./src/Data/TicTacToe.idr:89:1,Data.TicTacToe.w),(./src/Data/TicTacToe.idr:92:1,Data.TicTacToe.c),(./src/Data/TicTacToe.idr:95:1,Data.TicTacToe.e),(./src/Data/TicTacToe.idr:98:1,Data.TicTacToe.sw),(./src/Data/TicTacToe.idr:101:1,Data.TicTacToe.s),(./src/Data/TicTacToe.idr:104:1,Data.TicTacToe.se),(./src/Data/TicTacToe.idr:107:1,Data.TicTacToe.startBoard),(./src/Data/TicTacToe.idr:113:1,Data.TicTacToe.line),(./src/Data/TicTacToe.idr:118:1,Data.TicTacToe.winner),(./src/Data/TicTacToe.idr:126:1,Data.TicTacToe.countOf),(./src/Data/TicTacToe.idr:130:1,Data.TicTacToe.even),(./src/Data/TicTacToe.idr:135:1,Data.TicTacToe.occupied),(./src/Data/TicTacToe.idr:138:1,Data.TicTacToe.next),(./src/Data/TicTacToe.idr:145:1,Data.TicTacToe.validMove),(./src/Data/TicTacToe.idr:151:1,Data.TicTacToe.validMoveX),(./src/Data/TicTacToe.idr:155:1,Data.TicTacToe.doMove),(./src/Data/TicTacToe.idr:166:3,{Data.TicTacToe.mv74}),(./src/Data/TicTacToe.idr:165:1,Data.TicTacToe.mv),(./src/Data/TicTacToe.idr:169:1,Data.TicTacToe.started),(./src/Data/TicTacToe.idr:183:1,Data.TicTacToe.getBoard),(./src/Data/TicTacToe.idr:186:1,Data.TicTacToe.state0),(./src/Data/TicTacToe.idr:187:1,Data.TicTacToe.state0t),(./src/Data/TicTacToe.idr:194:1,Data.TicTacToe.state1),(./src/Data/TicTacToe.idr:195:1,Data.TicTacToe.state1t),(./src/Data/TicTacToe.idr:198:1,Data.TicTacToe.AMove),(./src/Data/TicTacToe.idr:207:1,Data.TicTacToe.TICTACTOE),(./src/Data/TicTacToe.idr:211:12,Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:211:5,Effects.TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:210:12,TicTacToeRules, m instance of Effects.Handler),(./src/Data/TicTacToe.idr:228:3,Default.Game startBoard instance of Default.Default, method default),(./src/Data/TicTacToe.idr:227:10,Game startBoard instance of Default.Default),(./src/Data/TicTacToe.idr:233:1,Data.TicTacToe.game),(./src/Data/TicTacToe.idr:248:1,Data.TicTacToe.parse),(./src/Data/TicTacToe.idr:271:9,Data.TicTacToe.case block in dostuff),(./src/Data/TicTacToe.idr:271:1,Data.TicTacToe.dostuff),(./src/Data/TicTacToe.idr:281:1,Data.TicTacToe.gamexx),(./src/Data/TicTacToe.idr:287:1,Data.TicTacToe.gamex),(./src/Data/TicTacToe.idr:334:1,Data.TicTacToe.go)]
Finished ./src/Data/TicTacToe.idr
Universe checking
Writing ibc "./src/Data/TicTacToe.ibc"
Written
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:24:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:25:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:42:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:141:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:158:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:200:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
Elaborating type decl Data.TicTacToe.go[]
Elaborating clause Data.TicTacToe.go
Totality checking
Totality checking [(:0:0,<<{__Unit0} eliminator>>),(builtin:0:0,__elimTy),(builtin:0:0,elim),(./src/Data/TicTacToe.idr:28:3,Prelude.Cell instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:27:10,Cell instance of Prelude.Show),(./src/Data/TicTacToe.idr:33:3,Prelude.Player instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:32:10,Player instance of Prelude.Show),(./src/Data/TicTacToe.idr:37:1,Data.TicTacToe.Pos),(./src/Data/TicTacToe.idr:40:1,Data.TicTacToe.Board),(./src/Data/TicTacToe.idr:45:3,Prelude.PrettyBoard instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:44:10,PrettyBoard instance of Prelude.Show),(./src/Data/TicTacToe.idr:58:1,Data.TicTacToe.toCell),(./src/Data/TicTacToe.idr:62:3,Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:61:10,Player instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:68:3,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:67:10,Cell instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:80:1,Data.TicTacToe.nw),(./src/Data/TicTacToe.idr:83:1,Data.TicTacToe.n),(./src/Data/TicTacToe.idr:86:1,Data.TicTacToe.ne),(./src/Data/TicTacToe.idr:89:1,Data.TicTacToe.w),(./src/Data/TicTacToe.idr:92:1,Data.TicTacToe.c),(./src/Data/TicTacToe.idr:95:1,Data.TicTacToe.e),(./src/Data/TicTacToe.idr:98:1,Data.TicTacToe.sw),(./src/Data/TicTacToe.idr:101:1,Data.TicTacToe.s),(./src/Data/TicTacToe.idr:104:1,Data.TicTacToe.se),(./src/Data/TicTacToe.idr:107:1,Data.TicTacToe.startBoard),(./src/Data/TicTacToe.idr:113:1,Data.TicTacToe.line),(./src/Data/TicTacToe.idr:118:1,Data.TicTacToe.winner),(./src/Data/TicTacToe.idr:126:1,Data.TicTacToe.countOf),(./src/Data/TicTacToe.idr:130:1,Data.TicTacToe.even),(./src/Data/TicTacToe.idr:135:1,Data.TicTacToe.occupied),(./src/Data/TicTacToe.idr:138:1,Data.TicTacToe.next),(./src/Data/TicTacToe.idr:145:1,Data.TicTacToe.validMove),(./src/Data/TicTacToe.idr:151:1,Data.TicTacToe.validMoveX),(./src/Data/TicTacToe.idr:155:1,Data.TicTacToe.doMove),(./src/Data/TicTacToe.idr:166:3,{Data.TicTacToe.mv74}),(./src/Data/TicTacToe.idr:165:1,Data.TicTacToe.mv),(./src/Data/TicTacToe.idr:169:1,Data.TicTacToe.started),(./src/Data/TicTacToe.idr:183:1,Data.TicTacToe.getBoard),(./src/Data/TicTacToe.idr:186:1,Data.TicTacToe.state0),(./src/Data/TicTacToe.idr:187:1,Data.TicTacToe.state0t),(./src/Data/TicTacToe.idr:194:1,Data.TicTacToe.state1),(./src/Data/TicTacToe.idr:195:1,Data.TicTacToe.state1t),(./src/Data/TicTacToe.idr:198:1,Data.TicTacToe.AMove),(./src/Data/TicTacToe.idr:207:1,Data.TicTacToe.TICTACTOE),(./src/Data/TicTacToe.idr:211:12,Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:211:5,Effects.TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:210:12,TicTacToeRules, m instance of Effects.Handler),(./src/Data/TicTacToe.idr:228:3,Default.Game startBoard instance of Default.Default, method default),(./src/Data/TicTacToe.idr:227:10,Game startBoard instance of Default.Default),(./src/Data/TicTacToe.idr:233:1,Data.TicTacToe.game),(./src/Data/TicTacToe.idr:248:1,Data.TicTacToe.parse),(./src/Data/TicTacToe.idr:271:9,Data.TicTacToe.case block in dostuff),(./src/Data/TicTacToe.idr:271:1,Data.TicTacToe.dostuff),(./src/Data/TicTacToe.idr:281:1,Data.TicTacToe.gamexx),(./src/Data/TicTacToe.idr:287:1,Data.TicTacToe.gamex),(./src/Data/TicTacToe.idr:334:1,Data.TicTacToe.go)]
Finished ./src/Data/TicTacToe.idr
Universe checking
Writing ibc "./src/Data/TicTacToe.ibc"
Written
*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:24:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:25:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:42:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:141:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:158:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:200:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
Prelude.(!!): index too large

*src/Data/TicTacToe> 


*src/Data/TicTacToe>
*src/Data/TicTacToe>

*src/Data/TicTacToe> :r
:r
Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:22:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:23:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:40:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:139:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:156:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:198:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.isWeiner[]
Elaborating clause Data.TicTacToe.isWeiner
When elaborating right hand side of isWeiner:
./src/Data/TicTacToe.idr:288:1:When elaborating an application of function Effects.>>=:
        Can't unify
                Maybe Player
        with
                Eff IO
                    Bool
                    ((\v =>
                        updateResTy v
                                    [(TICTACTOE (Game board))]
                                    (let {scriptvar625} =
                                    reflectEff (EffElem TicTacToeRules
                                                        (Game board)
                                                        [(TICTACTOE (Game board))]) in
                                    Here)
                                    Get) _bindApp0)
                    (\result => [TICTACTOE (Game board)])

        Specifically:
                Can't unify
                        Maybe Player
                with
                        Eff IO
                            Bool
                            [(TICTACTOE (Game board))]
                            (\result => [TICTACTOE (Game board)])
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
When elaborating right hand side of gamex:
./src/Data/TicTacToe.idr:300:42:When elaborating an application of function Effects.>>=:
        No such variable weiner
Elaborating type decl Data.TicTacToe.go[]
Elaborating clause Data.TicTacToe.go
Totality checking
Totality checking [(:0:0,<<{__Unit0} eliminator>>),(builtin:0:0,__elimTy),(builtin:0:0,elim),(./src/Data/TicTacToe.idr:26:3,Prelude.Cell instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:25:10,Cell instance of Prelude.Show),(./src/Data/TicTacToe.idr:31:3,Prelude.Player instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:30:10,Player instance of Prelude.Show),(./src/Data/TicTacToe.idr:35:1,Data.TicTacToe.Pos),(./src/Data/TicTacToe.idr:38:1,Data.TicTacToe.Board),(./src/Data/TicTacToe.idr:43:3,Prelude.PrettyBoard instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:42:10,PrettyBoard instance of Prelude.Show),(./src/Data/TicTacToe.idr:56:1,Data.TicTacToe.toCell),(./src/Data/TicTacToe.idr:60:3,Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:59:10,Player instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:66:3,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:65:10,Cell instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:78:1,Data.TicTacToe.nw),(./src/Data/TicTacToe.idr:81:1,Data.TicTacToe.n),(./src/Data/TicTacToe.idr:84:1,Data.TicTacToe.ne),(./src/Data/TicTacToe.idr:87:1,Data.TicTacToe.w),(./src/Data/TicTacToe.idr:90:1,Data.TicTacToe.c),(./src/Data/TicTacToe.idr:93:1,Data.TicTacToe.e),(./src/Data/TicTacToe.idr:96:1,Data.TicTacToe.sw),(./src/Data/TicTacToe.idr:99:1,Data.TicTacToe.s),(./src/Data/TicTacToe.idr:102:1,Data.TicTacToe.se),(./src/Data/TicTacToe.idr:105:1,Data.TicTacToe.startBoard),(./src/Data/TicTacToe.idr:111:1,Data.TicTacToe.line),(./src/Data/TicTacToe.idr:116:1,Data.TicTacToe.winner),(./src/Data/TicTacToe.idr:124:1,Data.TicTacToe.countOf),(./src/Data/TicTacToe.idr:128:1,Data.TicTacToe.even),(./src/Data/TicTacToe.idr:133:1,Data.TicTacToe.occupied),(./src/Data/TicTacToe.idr:136:1,Data.TicTacToe.next),(./src/Data/TicTacToe.idr:143:1,Data.TicTacToe.validMove),(./src/Data/TicTacToe.idr:149:1,Data.TicTacToe.validMoveX),(./src/Data/TicTacToe.idr:153:1,Data.TicTacToe.doMove),(./src/Data/TicTacToe.idr:164:3,{Data.TicTacToe.mv74}),(./src/Data/TicTacToe.idr:163:1,Data.TicTacToe.mv),(./src/Data/TicTacToe.idr:167:1,Data.TicTacToe.started),(./src/Data/TicTacToe.idr:181:1,Data.TicTacToe.getBoard),(./src/Data/TicTacToe.idr:184:1,Data.TicTacToe.state0),(./src/Data/TicTacToe.idr:185:1,Data.TicTacToe.state0t),(./src/Data/TicTacToe.idr:192:1,Data.TicTacToe.state1),(./src/Data/TicTacToe.idr:193:1,Data.TicTacToe.state1t),(./src/Data/TicTacToe.idr:196:1,Data.TicTacToe.AMove),(./src/Data/TicTacToe.idr:205:1,Data.TicTacToe.TICTACTOE),(./src/Data/TicTacToe.idr:209:12,Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:209:5,Effects.TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:208:12,TicTacToeRules, m instance of Effects.Handler),(./src/Data/TicTacToe.idr:226:3,Default.Game startBoard instance of Default.Default, method default),(./src/Data/TicTacToe.idr:225:10,Game startBoard instance of Default.Default),(./src/Data/TicTacToe.idr:231:1,Data.TicTacToe.game),(./src/Data/TicTacToe.idr:246:1,Data.TicTacToe.parse),(./src/Data/TicTacToe.idr:269:9,Data.TicTacToe.case block in dostuff),(./src/Data/TicTacToe.idr:269:1,Data.TicTacToe.dostuff),(./src/Data/TicTacToe.idr:279:1,Data.TicTacToe.gamexx),(./src/Data/TicTacToe.idr:339:1,Data.TicTacToe.go)]
Finished ./src/Data/TicTacToe.idr
Universe checking
Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.isWeiner
*src/Data/TicTacToe> 


Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.isWeiner
*src/Data/TicTacToe>
Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.isWeiner
*src/Data/TicTacToe> :r
:r
CHASING "src/Data/TicTacToe"
Found IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr")
CHASING "Effect/StdIO"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr")
CHASING "Effect/System"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr")
CHASING "Effect/Random"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr")
MODULE TREE : [MTree {mod_path = IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr"), mod_needsRecheck = True, mod_time = 2014-04-27 03:27:04 UTC, mod_deps = [MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []}]}]
RELOAD: [IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"),IDR "./src/Data/TicTacToe.idr"]
Reading ./src/Data/TicTacToe.idr
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effects.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Language/Reflection.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/Catchable.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/IOExcept.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Default.ibc
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc
Already read Effects
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/System.ibc
Already read Prelude
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc
Already read Effects
Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:22:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:23:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:40:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:139:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:156:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:198:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.isWeiner[]
Elaborating clause Data.TicTacToe.isWeiner
When elaborating right hand side of isWeiner:
./src/Data/TicTacToe.idr:288:1:When elaborating an application of function Effects.>>=:
        Can't unify
                Maybe Player
        with
                Eff IO
                    Bool
                    ((\v =>
                        updateResTy v
                                    [(TICTACTOE (Game board))]
                                    (let {scriptvar625} =
                                    reflectEff (EffElem TicTacToeRules
                                                        (Game board)
                                                        [(TICTACTOE (Game board))]) in
                                    Here)
                                    Get) _bindApp0)
                    (\result => [TICTACTOE (Game board)])

        Specifically:
                Can't unify
                        Maybe Player
                with
                        Eff IO
                            Bool
                            [(TICTACTOE (Game board))]
                            (\result => [TICTACTOE (Game board)])
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
When elaborating right hand side of gamex:
./Prelude/Bool.idr:20:59:When elaborating argument val to constructor Delay:
        Can't unify
                TicTacToeRules g g (\result => g)
        with
                Eff IO
                    (Vect 9 Cell)
                    [(TICTACTOE (Game bindx)), STDIO]
                    (\outboard => [TICTACTOE (Game outboard), STDIO])

        Specifically:
                Can't unify
                        TicTacToeRules g g (\result => g)
                with
                        Eff IO
                            (Vect 9 Cell)
                            [(TICTACTOE (Game bindx)), STDIO]
                            (\outboard => [TICTACTOE (Game outboard), STDIO])
Elaborating type decl Data.TicTacToe.go[]
Elaborating clause Data.TicTacToe.go
Totality checking
Totality checking [(:0:0,<<{__Unit0} eliminator>>),(builtin:0:0,__elimTy),(builtin:0:0,elim),(./src/Data/TicTacToe.idr:26:3,Prelude.Cell instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:25:10,Cell instance of Prelude.Show),(./src/Data/TicTacToe.idr:31:3,Prelude.Player instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:30:10,Player instance of Prelude.Show),(./src/Data/TicTacToe.idr:35:1,Data.TicTacToe.Pos),(./src/Data/TicTacToe.idr:38:1,Data.TicTacToe.Board),(./src/Data/TicTacToe.idr:43:3,Prelude.PrettyBoard instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:42:10,PrettyBoard instance of Prelude.Show),(./src/Data/TicTacToe.idr:56:1,Data.TicTacToe.toCell),(./src/Data/TicTacToe.idr:60:3,Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:59:10,Player instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:66:3,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:65:10,Cell instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:78:1,Data.TicTacToe.nw),(./src/Data/TicTacToe.idr:81:1,Data.TicTacToe.n),(./src/Data/TicTacToe.idr:84:1,Data.TicTacToe.ne),(./src/Data/TicTacToe.idr:87:1,Data.TicTacToe.w),(./src/Data/TicTacToe.idr:90:1,Data.TicTacToe.c),(./src/Data/TicTacToe.idr:93:1,Data.TicTacToe.e),(./src/Data/TicTacToe.idr:96:1,Data.TicTacToe.sw),(./src/Data/TicTacToe.idr:99:1,Data.TicTacToe.s),(./src/Data/TicTacToe.idr:102:1,Data.TicTacToe.se),(./src/Data/TicTacToe.idr:105:1,Data.TicTacToe.startBoard),(./src/Data/TicTacToe.idr:111:1,Data.TicTacToe.line),(./src/Data/TicTacToe.idr:116:1,Data.TicTacToe.winner),(./src/Data/TicTacToe.idr:124:1,Data.TicTacToe.countOf),(./src/Data/TicTacToe.idr:128:1,Data.TicTacToe.even),(./src/Data/TicTacToe.idr:133:1,Data.TicTacToe.occupied),(./src/Data/TicTacToe.idr:136:1,Data.TicTacToe.next),(./src/Data/TicTacToe.idr:143:1,Data.TicTacToe.validMove),(./src/Data/TicTacToe.idr:149:1,Data.TicTacToe.validMoveX),(./src/Data/TicTacToe.idr:153:1,Data.TicTacToe.doMove),(./src/Data/TicTacToe.idr:164:3,{Data.TicTacToe.mv74}),(./src/Data/TicTacToe.idr:163:1,Data.TicTacToe.mv),(./src/Data/TicTacToe.idr:167:1,Data.TicTacToe.started),(./src/Data/TicTacToe.idr:181:1,Data.TicTacToe.getBoard),(./src/Data/TicTacToe.idr:184:1,Data.TicTacToe.state0),(./src/Data/TicTacToe.idr:185:1,Data.TicTacToe.state0t),(./src/Data/TicTacToe.idr:192:1,Data.TicTacToe.state1),(./src/Data/TicTacToe.idr:193:1,Data.TicTacToe.state1t),(./src/Data/TicTacToe.idr:196:1,Data.TicTacToe.AMove),(./src/Data/TicTacToe.idr:205:1,Data.TicTacToe.TICTACTOE),(./src/Data/TicTacToe.idr:209:12,Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:209:5,Effects.TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:208:12,TicTacToeRules, m instance of Effects.Handler),(./src/Data/TicTacToe.idr:226:3,Default.Game startBoard instance of Default.Default, method default),(./src/Data/TicTacToe.idr:225:10,Game startBoard instance of Default.Default),(./src/Data/TicTacToe.idr:231:1,Data.TicTacToe.game),(./src/Data/TicTacToe.idr:246:1,Data.TicTacToe.parse),(./src/Data/TicTacToe.idr:269:9,Data.TicTacToe.case block in dostuff),(./src/Data/TicTacToe.idr:269:1,Data.TicTacToe.dostuff),(./src/Data/TicTacToe.idr:279:1,Data.TicTacToe.gamexx),(./src/Data/TicTacToe.idr:339:1,Data.TicTacToe.go)]
Finished ./src/Data/TicTacToe.idr
Universe checking
Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.isWeiner
*src/Data/TicTacToe> 


Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.isWeiner
*src/Data/TicTacToe>
Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.isWeiner
*src/Data/TicTacToe> :r
:r
CHASING "src/Data/TicTacToe"
Found IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr")
CHASING "Effect/StdIO"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr")
CHASING "Effect/System"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr")
CHASING "Effect/Random"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr")
MODULE TREE : [MTree {mod_path = IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr"), mod_needsRecheck = True, mod_time = 2014-04-27 03:27:04 UTC, mod_deps = [MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []}]}]
RELOAD: [IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"),IDR "./src/Data/TicTacToe.idr"]
Reading ./src/Data/TicTacToe.idr
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effects.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Language/Reflection.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/Catchable.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/IOExcept.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Default.ibc
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc
Already read Effects
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/System.ibc
Already read Prelude
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc
Already read Effects
Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:22:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:23:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:40:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:139:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:156:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:198:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.isWeiner[]
Elaborating clause Data.TicTacToe.isWeiner
./src/Data/TicTacToe.idr:282:11:
When elaborating right hand side of isWeiner:
When elaborating an application of function Effects.>>=:
        No such variable isDefined
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
When elaborating right hand side of gamex:
./Prelude/Bool.idr:20:59:When elaborating argument val to constructor Delay:
        Can't unify
                TicTacToeRules g g (\result => g)
        with
                Eff IO
                    (Vect 9 Cell)
                    [(TICTACTOE (Game bindx)), STDIO]
                    (\outboard => [TICTACTOE (Game outboard), STDIO])

        Specifically:
                Can't unify
                        TicTacToeRules g g (\result => g)
                with
                        Eff IO
                            (Vect 9 Cell)
                            [(TICTACTOE (Game bindx)), STDIO]
                            (\outboard => [TICTACTOE (Game outboard), STDIO])
Elaborating type decl Data.TicTacToe.go[]
Elaborating clause Data.TicTacToe.go
Totality checking
Totality checking [(:0:0,<<{__Unit0} eliminator>>),(builtin:0:0,__elimTy),(builtin:0:0,elim),(./src/Data/TicTacToe.idr:26:3,Prelude.Cell instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:25:10,Cell instance of Prelude.Show),(./src/Data/TicTacToe.idr:31:3,Prelude.Player instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:30:10,Player instance of Prelude.Show),(./src/Data/TicTacToe.idr:35:1,Data.TicTacToe.Pos),(./src/Data/TicTacToe.idr:38:1,Data.TicTacToe.Board),(./src/Data/TicTacToe.idr:43:3,Prelude.PrettyBoard instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:42:10,PrettyBoard instance of Prelude.Show),(./src/Data/TicTacToe.idr:56:1,Data.TicTacToe.toCell),(./src/Data/TicTacToe.idr:60:3,Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:59:10,Player instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:66:3,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:65:10,Cell instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:78:1,Data.TicTacToe.nw),(./src/Data/TicTacToe.idr:81:1,Data.TicTacToe.n),(./src/Data/TicTacToe.idr:84:1,Data.TicTacToe.ne),(./src/Data/TicTacToe.idr:87:1,Data.TicTacToe.w),(./src/Data/TicTacToe.idr:90:1,Data.TicTacToe.c),(./src/Data/TicTacToe.idr:93:1,Data.TicTacToe.e),(./src/Data/TicTacToe.idr:96:1,Data.TicTacToe.sw),(./src/Data/TicTacToe.idr:99:1,Data.TicTacToe.s),(./src/Data/TicTacToe.idr:102:1,Data.TicTacToe.se),(./src/Data/TicTacToe.idr:105:1,Data.TicTacToe.startBoard),(./src/Data/TicTacToe.idr:111:1,Data.TicTacToe.line),(./src/Data/TicTacToe.idr:116:1,Data.TicTacToe.winner),(./src/Data/TicTacToe.idr:124:1,Data.TicTacToe.countOf),(./src/Data/TicTacToe.idr:128:1,Data.TicTacToe.even),(./src/Data/TicTacToe.idr:133:1,Data.TicTacToe.occupied),(./src/Data/TicTacToe.idr:136:1,Data.TicTacToe.next),(./src/Data/TicTacToe.idr:143:1,Data.TicTacToe.validMove),(./src/Data/TicTacToe.idr:149:1,Data.TicTacToe.validMoveX),(./src/Data/TicTacToe.idr:153:1,Data.TicTacToe.doMove),(./src/Data/TicTacToe.idr:164:3,{Data.TicTacToe.mv74}),(./src/Data/TicTacToe.idr:163:1,Data.TicTacToe.mv),(./src/Data/TicTacToe.idr:167:1,Data.TicTacToe.started),(./src/Data/TicTacToe.idr:181:1,Data.TicTacToe.getBoard),(./src/Data/TicTacToe.idr:184:1,Data.TicTacToe.state0),(./src/Data/TicTacToe.idr:185:1,Data.TicTacToe.state0t),(./src/Data/TicTacToe.idr:192:1,Data.TicTacToe.state1),(./src/Data/TicTacToe.idr:193:1,Data.TicTacToe.state1t),(./src/Data/TicTacToe.idr:196:1,Data.TicTacToe.AMove),(./src/Data/TicTacToe.idr:205:1,Data.TicTacToe.TICTACTOE),(./src/Data/TicTacToe.idr:209:12,Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:209:5,Effects.TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:208:12,TicTacToeRules, m instance of Effects.Handler),(./src/Data/TicTacToe.idr:226:3,Default.Game startBoard instance of Default.Default, method default),(./src/Data/TicTacToe.idr:225:10,Game startBoard instance of Default.Default),(./src/Data/TicTacToe.idr:231:1,Data.TicTacToe.game),(./src/Data/TicTacToe.idr:246:1,Data.TicTacToe.parse),(./src/Data/TicTacToe.idr:269:9,Data.TicTacToe.case block in dostuff),(./src/Data/TicTacToe.idr:269:1,Data.TicTacToe.dostuff),(./src/Data/TicTacToe.idr:279:1,Data.TicTacToe.gamexx),(./src/Data/TicTacToe.idr:337:1,Data.TicTacToe.go)]
Finished ./src/Data/TicTacToe.idr
Universe checking
Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.isWeiner
*src/Data/TicTacToe> 
:r

Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.isWeiner
*src/Data/TicTacToe> :r
CHASING "src/Data/TicTacToe"
Found IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr")
CHASING "Effect/StdIO"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr")
CHASING "Effect/System"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr")
CHASING "Effect/Random"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr")
MODULE TREE : [MTree {mod_path = IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr"), mod_needsRecheck = True, mod_time = 2014-04-27 03:27:04 UTC, mod_deps = [MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []}]}]
RELOAD: [IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"),IDR "./src/Data/TicTacToe.idr"]
Reading ./src/Data/TicTacToe.idr
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effects.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Language/Reflection.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/Catchable.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/IOExcept.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Default.ibc
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc
Already read Effects
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/System.ibc
Already read Prelude
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc
Already read Effects
Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:22:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:23:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:40:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:139:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:156:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:198:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.isWeiner[]
Elaborating clause Data.TicTacToe.isWeiner
When elaborating right hand side of isWeiner:
./src/Data/TicTacToe.idr:282:32:When elaborating an application of function Effects.>>=:
        Can't unify
                Bool
        with
                Eff IO
                    Bool
                    ((\v =>
                        updateResTy v
                                    [(TICTACTOE (Game board))]
                                    (let {scriptvar625} =
                                    reflectEff (EffElem TicTacToeRules
                                                        (Game board)
                                                        [(TICTACTOE (Game board))]) in
                                    Here)
                                    Get) _bindApp0)
                    (\result => [TICTACTOE (Game board)])

        Specifically:
                Can't unify
                        Bool
                with
                        Eff IO
                            Bool
                            [(TICTACTOE (Game board))]
                            (\result => [TICTACTOE (Game board)])
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
When elaborating right hand side of gamex:
./Prelude/Bool.idr:20:59:When elaborating argument val to constructor Delay:
        Can't unify
                TicTacToeRules g g (\result => g)
        with
                Eff IO
                    (Vect 9 Cell)
                    [(TICTACTOE (Game bindx)), STDIO]
                    (\outboard => [TICTACTOE (Game outboard), STDIO])

        Specifically:
                Can't unify
                        TicTacToeRules g g (\result => g)
                with
                        Eff IO
                            (Vect 9 Cell)
                            [(TICTACTOE (Game bindx)), STDIO]
                            (\outboard => [TICTACTOE (Game outboard), STDIO])
Elaborating type decl Data.TicTacToe.go[]
Elaborating clause Data.TicTacToe.go
Totality checking
Totality checking [(:0:0,<<{__Unit0} eliminator>>),(builtin:0:0,__elimTy),(builtin:0:0,elim),(./src/Data/TicTacToe.idr:26:3,Prelude.Cell instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:25:10,Cell instance of Prelude.Show),(./src/Data/TicTacToe.idr:31:3,Prelude.Player instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:30:10,Player instance of Prelude.Show),(./src/Data/TicTacToe.idr:35:1,Data.TicTacToe.Pos),(./src/Data/TicTacToe.idr:38:1,Data.TicTacToe.Board),(./src/Data/TicTacToe.idr:43:3,Prelude.PrettyBoard instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:42:10,PrettyBoard instance of Prelude.Show),(./src/Data/TicTacToe.idr:56:1,Data.TicTacToe.toCell),(./src/Data/TicTacToe.idr:60:3,Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:59:10,Player instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:66:3,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:65:10,Cell instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:78:1,Data.TicTacToe.nw),(./src/Data/TicTacToe.idr:81:1,Data.TicTacToe.n),(./src/Data/TicTacToe.idr:84:1,Data.TicTacToe.ne),(./src/Data/TicTacToe.idr:87:1,Data.TicTacToe.w),(./src/Data/TicTacToe.idr:90:1,Data.TicTacToe.c),(./src/Data/TicTacToe.idr:93:1,Data.TicTacToe.e),(./src/Data/TicTacToe.idr:96:1,Data.TicTacToe.sw),(./src/Data/TicTacToe.idr:99:1,Data.TicTacToe.s),(./src/Data/TicTacToe.idr:102:1,Data.TicTacToe.se),(./src/Data/TicTacToe.idr:105:1,Data.TicTacToe.startBoard),(./src/Data/TicTacToe.idr:111:1,Data.TicTacToe.line),(./src/Data/TicTacToe.idr:116:1,Data.TicTacToe.winner),(./src/Data/TicTacToe.idr:124:1,Data.TicTacToe.countOf),(./src/Data/TicTacToe.idr:128:1,Data.TicTacToe.even),(./src/Data/TicTacToe.idr:133:1,Data.TicTacToe.occupied),(./src/Data/TicTacToe.idr:136:1,Data.TicTacToe.next),(./src/Data/TicTacToe.idr:143:1,Data.TicTacToe.validMove),(./src/Data/TicTacToe.idr:149:1,Data.TicTacToe.validMoveX),(./src/Data/TicTacToe.idr:153:1,Data.TicTacToe.doMove),(./src/Data/TicTacToe.idr:164:3,{Data.TicTacToe.mv74}),(./src/Data/TicTacToe.idr:163:1,Data.TicTacToe.mv),(./src/Data/TicTacToe.idr:167:1,Data.TicTacToe.started),(./src/Data/TicTacToe.idr:181:1,Data.TicTacToe.getBoard),(./src/Data/TicTacToe.idr:184:1,Data.TicTacToe.state0),(./src/Data/TicTacToe.idr:185:1,Data.TicTacToe.state0t),(./src/Data/TicTacToe.idr:192:1,Data.TicTacToe.state1),(./src/Data/TicTacToe.idr:193:1,Data.TicTacToe.state1t),(./src/Data/TicTacToe.idr:196:1,Data.TicTacToe.AMove),(./src/Data/TicTacToe.idr:205:1,Data.TicTacToe.TICTACTOE),(./src/Data/TicTacToe.idr:209:12,Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:209:5,Effects.TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:208:12,TicTacToeRules, m instance of Effects.Handler),(./src/Data/TicTacToe.idr:226:3,Default.Game startBoard instance of Default.Default, method default),(./src/Data/TicTacToe.idr:225:10,Game startBoard instance of Default.Default),(./src/Data/TicTacToe.idr:231:1,Data.TicTacToe.game),(./src/Data/TicTacToe.idr:246:1,Data.TicTacToe.parse),(./src/Data/TicTacToe.idr:269:9,Data.TicTacToe.case block in dostuff),(./src/Data/TicTacToe.idr:269:1,Data.TicTacToe.dostuff),(./src/Data/TicTacToe.idr:279:1,Data.TicTacToe.gamexx),(./src/Data/TicTacToe.idr:337:1,Data.TicTacToe.go)]
Finished ./src/Data/TicTacToe.idr
Universe checking
Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.isWeiner
*src/Data/TicTacToe> 
:r

Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.isWeiner
*src/Data/TicTacToe> :r
CHASING "src/Data/TicTacToe"
Found IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr")
CHASING "Effect/StdIO"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr")
CHASING "Effect/System"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr")
CHASING "Effect/Random"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr")
MODULE TREE : [MTree {mod_path = IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr"), mod_needsRecheck = True, mod_time = 2014-04-27 03:27:04 UTC, mod_deps = [MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []}]}]
RELOAD: [IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"),IDR "./src/Data/TicTacToe.idr"]
Reading ./src/Data/TicTacToe.idr
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effects.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Language/Reflection.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/Catchable.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/IOExcept.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Default.ibc
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc
Already read Effects
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/System.ibc
Already read Prelude
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc
Already read Effects
Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:22:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:23:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:40:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:139:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:156:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:198:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.isWeiner[]
Elaborating clause Data.TicTacToe.isWeiner
When elaborating right hand side of isWeiner:
./src/Data/TicTacToe.idr:282:34:When elaborating an application of function Data.TicTacToe.winner:
        Can't unify
                Game board
        with
                Board

        Specifically:
                Can't unify
                        Game board
                with
                        Vect 9 Cell
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
When elaborating right hand side of gamex:
./Prelude/Bool.idr:20:59:When elaborating argument val to constructor Delay:
        Can't unify
                TicTacToeRules g g (\result => g)
        with
                Eff IO
                    (Vect 9 Cell)
                    [(TICTACTOE (Game bindx)), STDIO]
                    (\outboard => [TICTACTOE (Game outboard), STDIO])

        Specifically:
                Can't unify
                        TicTacToeRules g g (\result => g)
                with
                        Eff IO
                            (Vect 9 Cell)
                            [(TICTACTOE (Game bindx)), STDIO]
                            (\outboard => [TICTACTOE (Game outboard), STDIO])
Elaborating type decl Data.TicTacToe.go[]
Elaborating clause Data.TicTacToe.go
Totality checking
Totality checking [(:0:0,<<{__Unit0} eliminator>>),(builtin:0:0,__elimTy),(builtin:0:0,elim),(./src/Data/TicTacToe.idr:26:3,Prelude.Cell instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:25:10,Cell instance of Prelude.Show),(./src/Data/TicTacToe.idr:31:3,Prelude.Player instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:30:10,Player instance of Prelude.Show),(./src/Data/TicTacToe.idr:35:1,Data.TicTacToe.Pos),(./src/Data/TicTacToe.idr:38:1,Data.TicTacToe.Board),(./src/Data/TicTacToe.idr:43:3,Prelude.PrettyBoard instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:42:10,PrettyBoard instance of Prelude.Show),(./src/Data/TicTacToe.idr:56:1,Data.TicTacToe.toCell),(./src/Data/TicTacToe.idr:60:3,Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:59:10,Player instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:66:3,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:65:10,Cell instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:78:1,Data.TicTacToe.nw),(./src/Data/TicTacToe.idr:81:1,Data.TicTacToe.n),(./src/Data/TicTacToe.idr:84:1,Data.TicTacToe.ne),(./src/Data/TicTacToe.idr:87:1,Data.TicTacToe.w),(./src/Data/TicTacToe.idr:90:1,Data.TicTacToe.c),(./src/Data/TicTacToe.idr:93:1,Data.TicTacToe.e),(./src/Data/TicTacToe.idr:96:1,Data.TicTacToe.sw),(./src/Data/TicTacToe.idr:99:1,Data.TicTacToe.s),(./src/Data/TicTacToe.idr:102:1,Data.TicTacToe.se),(./src/Data/TicTacToe.idr:105:1,Data.TicTacToe.startBoard),(./src/Data/TicTacToe.idr:111:1,Data.TicTacToe.line),(./src/Data/TicTacToe.idr:116:1,Data.TicTacToe.winner),(./src/Data/TicTacToe.idr:124:1,Data.TicTacToe.countOf),(./src/Data/TicTacToe.idr:128:1,Data.TicTacToe.even),(./src/Data/TicTacToe.idr:133:1,Data.TicTacToe.occupied),(./src/Data/TicTacToe.idr:136:1,Data.TicTacToe.next),(./src/Data/TicTacToe.idr:143:1,Data.TicTacToe.validMove),(./src/Data/TicTacToe.idr:149:1,Data.TicTacToe.validMoveX),(./src/Data/TicTacToe.idr:153:1,Data.TicTacToe.doMove),(./src/Data/TicTacToe.idr:164:3,{Data.TicTacToe.mv74}),(./src/Data/TicTacToe.idr:163:1,Data.TicTacToe.mv),(./src/Data/TicTacToe.idr:167:1,Data.TicTacToe.started),(./src/Data/TicTacToe.idr:181:1,Data.TicTacToe.getBoard),(./src/Data/TicTacToe.idr:184:1,Data.TicTacToe.state0),(./src/Data/TicTacToe.idr:185:1,Data.TicTacToe.state0t),(./src/Data/TicTacToe.idr:192:1,Data.TicTacToe.state1),(./src/Data/TicTacToe.idr:193:1,Data.TicTacToe.state1t),(./src/Data/TicTacToe.idr:196:1,Data.TicTacToe.AMove),(./src/Data/TicTacToe.idr:205:1,Data.TicTacToe.TICTACTOE),(./src/Data/TicTacToe.idr:209:12,Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:209:5,Effects.TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:208:12,TicTacToeRules, m instance of Effects.Handler),(./src/Data/TicTacToe.idr:226:3,Default.Game startBoard instance of Default.Default, method default),(./src/Data/TicTacToe.idr:225:10,Game startBoard instance of Default.Default),(./src/Data/TicTacToe.idr:231:1,Data.TicTacToe.game),(./src/Data/TicTacToe.idr:246:1,Data.TicTacToe.parse),(./src/Data/TicTacToe.idr:269:9,Data.TicTacToe.case block in dostuff),(./src/Data/TicTacToe.idr:269:1,Data.TicTacToe.dostuff),(./src/Data/TicTacToe.idr:279:1,Data.TicTacToe.gamexx),(./src/Data/TicTacToe.idr:337:1,Data.TicTacToe.go)]
Finished ./src/Data/TicTacToe.idr
Universe checking
Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.isWeiner
*src/Data/TicTacToe> 
:r

Metavariables: Data.TicTacToe.gamex, Data.TicTacToe.isWeiner
*src/Data/TicTacToe> :r
CHASING "src/Data/TicTacToe"
Found IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr")
CHASING "Effect/StdIO"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr")
CHASING "Effect/System"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr")
CHASING "Effect/Random"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr")
MODULE TREE : [MTree {mod_path = IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr"), mod_needsRecheck = True, mod_time = 2014-04-27 03:27:04 UTC, mod_deps = [MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []}]}]
RELOAD: [IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"),IDR "./src/Data/TicTacToe.idr"]
Reading ./src/Data/TicTacToe.idr
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effects.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Language/Reflection.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/Catchable.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/IOExcept.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Default.ibc
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc
Already read Effects
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/System.ibc
Already read Prelude
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc
Already read Effects
Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:22:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:23:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:40:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:139:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:156:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:198:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.isWeiner[]
Elaborating clause Data.TicTacToe.isWeiner
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
When elaborating right hand side of gamex:
./Prelude/Bool.idr:20:59:When elaborating argument val to constructor Delay:
        Can't unify
                TicTacToeRules g g (\result => g)
        with
                Eff IO
                    (Vect 9 Cell)
                    [(TICTACTOE (Game bindx)), STDIO]
                    (\outboard => [TICTACTOE (Game outboard), STDIO])

        Specifically:
                Can't unify
                        TicTacToeRules g g (\result => g)
                with
                        Eff IO
                            (Vect 9 Cell)
                            [(TICTACTOE (Game bindx)), STDIO]
                            (\outboard => [TICTACTOE (Game outboard), STDIO])
Elaborating type decl Data.TicTacToe.go[]
Elaborating clause Data.TicTacToe.go
Totality checking
Totality checking [(:0:0,<<{__Unit0} eliminator>>),(builtin:0:0,__elimTy),(builtin:0:0,elim),(./src/Data/TicTacToe.idr:26:3,Prelude.Cell instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:25:10,Cell instance of Prelude.Show),(./src/Data/TicTacToe.idr:31:3,Prelude.Player instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:30:10,Player instance of Prelude.Show),(./src/Data/TicTacToe.idr:35:1,Data.TicTacToe.Pos),(./src/Data/TicTacToe.idr:38:1,Data.TicTacToe.Board),(./src/Data/TicTacToe.idr:43:3,Prelude.PrettyBoard instance of Prelude.Show, method show),(./src/Data/TicTacToe.idr:42:10,PrettyBoard instance of Prelude.Show),(./src/Data/TicTacToe.idr:56:1,Data.TicTacToe.toCell),(./src/Data/TicTacToe.idr:60:3,Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:59:10,Player instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:66:3,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==),(./Prelude/Classes.idr:28:5,Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=),(./src/Data/TicTacToe.idr:65:10,Cell instance of Prelude.Classes.Eq),(./src/Data/TicTacToe.idr:78:1,Data.TicTacToe.nw),(./src/Data/TicTacToe.idr:81:1,Data.TicTacToe.n),(./src/Data/TicTacToe.idr:84:1,Data.TicTacToe.ne),(./src/Data/TicTacToe.idr:87:1,Data.TicTacToe.w),(./src/Data/TicTacToe.idr:90:1,Data.TicTacToe.c),(./src/Data/TicTacToe.idr:93:1,Data.TicTacToe.e),(./src/Data/TicTacToe.idr:96:1,Data.TicTacToe.sw),(./src/Data/TicTacToe.idr:99:1,Data.TicTacToe.s),(./src/Data/TicTacToe.idr:102:1,Data.TicTacToe.se),(./src/Data/TicTacToe.idr:105:1,Data.TicTacToe.startBoard),(./src/Data/TicTacToe.idr:111:1,Data.TicTacToe.line),(./src/Data/TicTacToe.idr:116:1,Data.TicTacToe.winner),(./src/Data/TicTacToe.idr:124:1,Data.TicTacToe.countOf),(./src/Data/TicTacToe.idr:128:1,Data.TicTacToe.even),(./src/Data/TicTacToe.idr:133:1,Data.TicTacToe.occupied),(./src/Data/TicTacToe.idr:136:1,Data.TicTacToe.next),(./src/Data/TicTacToe.idr:143:1,Data.TicTacToe.validMove),(./src/Data/TicTacToe.idr:149:1,Data.TicTacToe.validMoveX),(./src/Data/TicTacToe.idr:153:1,Data.TicTacToe.doMove),(./src/Data/TicTacToe.idr:164:3,{Data.TicTacToe.mv74}),(./src/Data/TicTacToe.idr:163:1,Data.TicTacToe.mv),(./src/Data/TicTacToe.idr:167:1,Data.TicTacToe.started),(./src/Data/TicTacToe.idr:181:1,Data.TicTacToe.getBoard),(./src/Data/TicTacToe.idr:184:1,Data.TicTacToe.state0),(./src/Data/TicTacToe.idr:185:1,Data.TicTacToe.state0t),(./src/Data/TicTacToe.idr:192:1,Data.TicTacToe.state1),(./src/Data/TicTacToe.idr:193:1,Data.TicTacToe.state1t),(./src/Data/TicTacToe.idr:196:1,Data.TicTacToe.AMove),(./src/Data/TicTacToe.idr:205:1,Data.TicTacToe.TICTACTOE),(./src/Data/TicTacToe.idr:209:12,Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:209:5,Effects.TicTacToeRules, m instance of Effects.Handler, method handle),(./src/Data/TicTacToe.idr:208:12,TicTacToeRules, m instance of Effects.Handler),(./src/Data/TicTacToe.idr:226:3,Default.Game startBoard instance of Default.Default, method default),(./src/Data/TicTacToe.idr:225:10,Game startBoard instance of Default.Default),(./src/Data/TicTacToe.idr:231:1,Data.TicTacToe.game),(./src/Data/TicTacToe.idr:246:1,Data.TicTacToe.parse),(./src/Data/TicTacToe.idr:269:9,Data.TicTacToe.case block in dostuff),(./src/Data/TicTacToe.idr:269:1,Data.TicTacToe.dostuff),(./src/Data/TicTacToe.idr:279:1,Data.TicTacToe.gamexx),(./src/Data/TicTacToe.idr:282:1,Data.TicTacToe.isWeiner),(./src/Data/TicTacToe.idr:337:1,Data.TicTacToe.go)]
Finished ./src/Data/TicTacToe.idr
Universe checking
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> 
:r

Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
CHASING "src/Data/TicTacToe"
Found IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr")
CHASING "Effect/StdIO"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr")
CHASING "Effect/System"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr")
CHASING "Effect/Random"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr")
MODULE TREE : [MTree {mod_path = IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr"), mod_needsRecheck = True, mod_time = 2014-04-27 03:27:04 UTC, mod_deps = [MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []}]}]
RELOAD: [IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"),IDR "./src/Data/TicTacToe.idr"]
Reading ./src/Data/TicTacToe.idr
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effects.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Language/Reflection.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/Catchable.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/IOExcept.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Default.ibc
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc
Already read Effects
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/System.ibc
Already read Prelude
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc
Already read Effects
Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:22:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:23:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:40:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:139:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:156:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:198:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.isWeiner[]
Elaborating clause Data.TicTacToe.isWeiner
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
Prelude.(!!): index too large

Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
CHASING "src/Data/TicTacToe"
Found IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr")
CHASING "Effect/StdIO"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr")
CHASING "Effect/System"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr")
CHASING "Effect/Random"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr")
MODULE TREE : [MTree {mod_path = IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr"), mod_needsRecheck = True, mod_time = 2014-04-27 03:27:04 UTC, mod_deps = [MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []}]}]
RELOAD: [IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"),IDR "./src/Data/TicTacToe.idr"]
Reading ./src/Data/TicTacToe.idr
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effects.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Language/Reflection.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/Catchable.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/IOExcept.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Default.ibc
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc
Already read Effects
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/System.ibc
Already read Prelude
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc
Already read Effects
Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:22:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:23:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:40:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:139:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:156:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:198:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.isWeiner[]
Elaborating clause Data.TicTacToe.isWeiner
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
DEFERRED [(Data.TicTacToe.case block in gamex,({someboard505} : Data.TicTacToe.Board) -> {__Unit0} -> Data.TicTacToe.Game {someboard505} -> Data.TicTacToe.Board -> String -> Data.TicTacToe.Player -> {__Unit0} -> {__Unit0} -> String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Data.TicTacToe.Pos -> ({bpat0} : Data.TicTacToe.Board) -> Data.TicTacToe.Board -> Effects.Eff IO (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) ((\ v : Data.TicTacToe.Board => Effects.updateWith Effects.EFFECT (Prelude.List.:: Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game {someboard505}) Data.TicTacToe.TicTacToeRules) (Prelude.List.Nil Effects.EFFECT)) ((\ outboard : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Prelude.List.:: Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game outboard) Data.TicTacToe.TicTacToeRules) (Prelude.List.Nil Effects.EFFECT)) v) (Prelude.List.:: Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game {someboard505}) Data.TicTacToe.TicTacToeRules) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT))) (let {scriptvar962} : Language.Reflection.Tactic = Effects.reflectEff (Effects.SubList Effects.EFFECT (Prelude.List.:: Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game {someboard505}) Data.TicTacToe.TicTacToeRules) (Prelude.List.Nil Effects.EFFECT)) (Prelude.List.:: Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game {someboard505}) Data.TicTacToe.TicTacToeRules) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))) in Effects.Keep Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game {someboard505}) Data.TicTacToe.TicTacToeRules) (Prelude.List.Nil Effects.EFFECT) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (Effects.Drop Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT) (Prelude.List.Nil Effects.EFFECT) (Effects.subListId Effects.EFFECT (Prelude.List.Nil Effects.EFFECT))))) {bpat0}) (\ outboard : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Prelude.List.:: Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game outboard) Data.TicTacToe.TicTacToeRules) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT))))]
Elaborating clause Data.TicTacToe.case block in gamex
Prelude.(!!): index too large

Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :R
:R
(input):1:1: error: expected: end of input,
    operator
:R<EOF>
^
Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> :r
:r
CHASING "src/Data/TicTacToe"
Found IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr")
CHASING "Effect/StdIO"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr")
CHASING "Effect/System"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr")
CHASING "Effect/Random"
Found IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr")
MODULE TREE : [MTree {mod_path = IBC "./src/Data/TicTacToe.ibc" (IDR "./src/Data/TicTacToe.idr"), mod_needsRecheck = True, mod_time = 2014-04-27 03:27:04 UTC, mod_deps = [MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []},MTree {mod_path = IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"), mod_needsRecheck = False, mod_time = 2014-04-21 04:35:45 UTC, mod_deps = []}]}]
RELOAD: [IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.idr"),IBC "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc" (IDR "/Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.idr"),IDR "./src/Data/TicTacToe.idr"]
Reading ./src/Data/TicTacToe.idr
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/StdIO.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effects.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Language/Reflection.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/Catchable.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/Control/IOExcept.ibc
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Default.ibc
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/System.ibc
Already read Effects
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/base/System.ibc
Already read Prelude
Already read Control/IOExcept
Loading ibc /Users/mth/home/idris-talk/.cabal-sandbox/share/x86_64-osx-ghc-7.6.1/idris-0.9.12/effects/Effect/Random.ibc
Already read Effects
Type checking ./src/Data/TicTacToe.idr
Elaborating Data.TicTacToe.Player
./src/Data/TicTacToe.idr:22:6
Forced: Data.TicTacToe.PlayerX fromList []
   from Data.TicTacToe.Player
Forced: Data.TicTacToe.PlayerO fromList []
   from Data.TicTacToe.Player
Elaborating Data.TicTacToe.Cell
./src/Data/TicTacToe.idr:23:6
Forced: Data.TicTacToe.CellX fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.CellO fromList []
   from Data.TicTacToe.Cell
Forced: Data.TicTacToe.b fromList []
   from Data.TicTacToe.Cell
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show CellX  = "x" where []
                            show CellO  = "o" where []
                            show b  = "_" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show]}
[pat @Prelude.Show$Cell 	   Cell instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Cell -> String,pat Prelude.!show 	   method show CellX  = "x" where []
                      method show CellO  = "o" where []
                      method show b  = "_" where []]]
Elaborating clause Cell instance of Prelude.Show
Elaborating type decl Prelude.Cell instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Cell instance of Prelude.Show, method show
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show PlayerX  = "x" where []
                            show PlayerO  = "o" where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show]}
[pat @Prelude.Show$Player 	   Player instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : Player -> String,pat Prelude.!show 	   method show PlayerX  = "x" where []
                      method show PlayerO  = "o" where []]]
Elaborating clause Player instance of Prelude.Show
Elaborating type decl Prelude.Player instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.Player instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.Pos[]
Elaborating clause Data.TicTacToe.Pos
Elaborating type decl Data.TicTacToe.Board[]
Elaborating clause Data.TicTacToe.Board
Elaborating Data.TicTacToe.PrettyBoard
./src/Data/TicTacToe.idr:40:6
Forced: Data.TicTacToe.PBoard fromList []
   from Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell -> Data.TicTacToe.PrettyBoard
Elaborating instance Show
Defaults inserted: [pat Data.TicTacToe.show 	   show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]
CI {instanceName = constructor of Prelude.Show, class_methods = [(Prelude.show,([PartialFn],a -> String))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Show,Integer instance of Prelude.Show,Float instance of Prelude.Show,Char instance of Prelude.Show,String instance of Prelude.Show,Nat instance of Prelude.Show,Bool instance of Prelude.Show,() instance of Prelude.Show,Bits8 instance of Prelude.Show,Bits16 instance of Prelude.Show,Bits32 instance of Prelude.Show,Bits64 instance of Prelude.Show,Bits8x16 instance of Prelude.Show,Bits16x8 instance of Prelude.Show,Bits32x4 instance of Prelude.Show,Bits64x2 instance of Prelude.Show,(a, b) instance of Prelude.Show,List a instance of Prelude.Show,Vect n a instance of Prelude.Show,Maybe a instance of Prelude.Show,Cell instance of Prelude.Show,Player instance of Prelude.Show]}
[pat @Prelude.Show$PrettyBoard 	   PrettyBoard instance of Prelude.Show  = constructor of Prelude.Show (\{meth0} => method show meth) where [tydecl Prelude.!show : PrettyBoard -> String,pat Prelude.!show 	   method show (PBoard [nw, n, ne, w, c, e, sw, s, se])  = " " ++ (show nw ++ (" | " ++ (show n ++ (" | " ++ (show ne ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show w ++ (" | " ++ (show c ++ (" | " ++ (show e ++ ("\n" ++ ("-----------\n" ++ (" " ++ (show sw ++ (" | " ++ (show s ++ (" | " ++ (show se ++ "\n"))))))))))))))))))))) where []]]
Elaborating clause PrettyBoard instance of Prelude.Show
Elaborating type decl Prelude.PrettyBoard instance of Prelude.Show, method show[PartialFn]
Elaborating clause Prelude.PrettyBoard instance of Prelude.Show, method show
Elaborating type decl Data.TicTacToe.toCell[]
Elaborating clause Data.TicTacToe.toCell
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   PlayerX == PlayerX  = True where []
                          PlayerY == PlayerY  = True where []
                          PlayerX == PlayerY  = False where []
                          PlayerY == PlayerX  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Player 	   Player instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Player -> Player -> Bool,tydecl Prelude.Classes.!/= : Player -> Player -> Bool,pat Prelude.Classes.!== 	   method == PlayerX PlayerX  = True where []
                            method == PlayerY PlayerY  = True where []
                            method == PlayerX PlayerY  = False where []
                            method == PlayerY PlayerX  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Player instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Player instance of Prelude.Classes.Eq, method /=
Elaborating instance Eq
Defaults inserted: [pat Data.TicTacToe.== 	   CellX == CellX  = True where []
                          CellO == CellO  = True where []
                          b == b  = True where []
                          CellX == CellO  = False where []
                          CellX == b  = False where []
                          CellO == CellX  = False where []
                          CellO == b  = False where []
                          b == CellX  = False where []
                          b == CellO  = False where [],pat Prelude.Classes./= 	   x /= y  = not (x == y) where []]
CI {instanceName = constructor of Prelude.Classes.Eq, class_methods = [(Prelude.Classes.==,([TotalFn],a -> a -> Bool)),(Prelude.Classes./=,([TotalFn],a -> a -> Bool))], class_defaults = [(Prelude.Classes./=,(Prelude.Classes.default#/=,pat Prelude.Classes.default#/= 	   default#/= x y  = not (x == y) where [])),(Prelude.Classes.==,(Prelude.Classes.default#==,pat Prelude.Classes.default#== 	   default#== x y  = not (x /= y) where []))], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Prelude.Classes.Eq,() instance of Prelude.Classes.Eq,Integer instance of Prelude.Classes.Eq,Float instance of Prelude.Classes.Eq,Char instance of Prelude.Classes.Eq,String instance of Prelude.Classes.Eq,Bool instance of Prelude.Classes.Eq,(a, b) instance of Prelude.Classes.Eq,Ordering instance of Prelude.Classes.Eq,Bits8 instance of Prelude.Classes.Eq,Bits16 instance of Prelude.Classes.Eq,Bits32 instance of Prelude.Classes.Eq,Bits64 instance of Prelude.Classes.Eq,Maybe a instance of Prelude.Classes.Eq,Nat instance of Prelude.Classes.Eq,List a instance of Prelude.Classes.Eq,Either a b instance of Prelude.Classes.Eq,Fin n instance of Prelude.Classes.Eq,Vect n a instance of Prelude.Classes.Eq,Player instance of Prelude.Classes.Eq,@@constructor of Prelude.Classes.Ord#Eq a]}
[pat @Prelude.Classes.Eq$Cell 	   Cell instance of Prelude.Classes.Eq  = constructor of Prelude.Classes.Eq (\{meth0} => \{meth1} => method == meth meth) (\{meth0} => \{meth1} => method /= meth meth) where [tydecl Prelude.Classes.!== : Cell -> Cell -> Bool,tydecl Prelude.Classes.!/= : Cell -> Cell -> Bool,pat Prelude.Classes.!== 	   method == CellX CellX  = True where []
                            method == CellO CellO  = True where []
                            method == b b  = True where []
                            method == CellX CellO  = False where []
                            method == CellX b  = False where []
                            method == CellO CellX  = False where []
                            method == CellO b  = False where []
                            method == b CellX  = False where []
                            method == b CellO  = False where [],pat Prelude.Classes.!/= 	   method /= x y  = not (x == y) where []]]
Elaborating clause Cell instance of Prelude.Classes.Eq
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==[TotalFn]
Elaborating type decl Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=[TotalFn]
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method ==
Elaborating clause Prelude.Classes.Cell instance of Prelude.Classes.Eq, method /=
Elaborating type decl Data.TicTacToe.nw[]
Elaborating clause Data.TicTacToe.nw
Elaborating type decl Data.TicTacToe.n[]
Elaborating clause Data.TicTacToe.n
Elaborating type decl Data.TicTacToe.ne[]
Elaborating clause Data.TicTacToe.ne
Elaborating type decl Data.TicTacToe.w[]
Elaborating clause Data.TicTacToe.w
Elaborating type decl Data.TicTacToe.c[]
Elaborating clause Data.TicTacToe.c
Elaborating type decl Data.TicTacToe.e[]
Elaborating clause Data.TicTacToe.e
Elaborating type decl Data.TicTacToe.sw[]
Elaborating clause Data.TicTacToe.sw
Elaborating type decl Data.TicTacToe.s[]
Elaborating clause Data.TicTacToe.s
Elaborating type decl Data.TicTacToe.se[]
Elaborating clause Data.TicTacToe.se
Elaborating type decl Data.TicTacToe.startBoard[]
Elaborating clause Data.TicTacToe.startBoard
Elaborating type decl Data.TicTacToe.line[]
Elaborating clause Data.TicTacToe.line
Elaborating type decl Data.TicTacToe.winner[]
Elaborating clause Data.TicTacToe.winner
Elaborating type decl Data.TicTacToe.countOf[]
Elaborating clause Data.TicTacToe.countOf
Elaborating type decl Data.TicTacToe.even[]
Elaborating clause Data.TicTacToe.even
Elaborating type decl Data.TicTacToe.occupied[]
Elaborating clause Data.TicTacToe.occupied
Elaborating type decl Data.TicTacToe.next[]
Elaborating clause Data.TicTacToe.next
Elaborating Data.TicTacToe.ValidMove
./src/Data/TicTacToe.idr:139:6
Forced: Data.TicTacToe.IsValidMove fromList [(2,Unconditional)]
   from Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> (b : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Data.TicTacToe.ValidMove b
Elaborating type decl Data.TicTacToe.validMove[]
Elaborating clause Data.TicTacToe.validMove
Elaborating type decl Data.TicTacToe.validMoveX[]
Elaborating clause Data.TicTacToe.validMoveX
Elaborating type decl Data.TicTacToe.doMove[]
Elaborating clause Data.TicTacToe.doMove
Elaborating Data.TicTacToe.Game
./src/Data/TicTacToe.idr:156:6
Forced: Data.TicTacToe.startGame fromList []
   from Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))
Forced: Data.TicTacToe.move fromList [(2,Conditional)]
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (validMove : Data.TicTacToe.ValidMove board) -> Data.TicTacToe.Game board -> Data.TicTacToe.Game (Data.TicTacToe.doMove board validMove)
Elaborating type decl Data.TicTacToe.mv[]
Elaborating clause Data.TicTacToe.mv
Elaborating clause {Data.TicTacToe.mv74}
Elaborating type decl Data.TicTacToe.started[]
Elaborating clause Data.TicTacToe.started
Elaborating type decl Data.TicTacToe.getBoard[]
Elaborating clause Data.TicTacToe.getBoard
Elaborating type decl Data.TicTacToe.state0[]
Elaborating clause Data.TicTacToe.state0
TI constraint: (Data.TicTacToe.state0t,Data.TicTacToe.Game (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))
Elaborating clause Data.TicTacToe.state0t
Elaborating type decl Data.TicTacToe.state1[]
Elaborating clause Data.TicTacToe.state1
TI constraint: (Data.TicTacToe.state1t,Data.TicTacToe.Game (Data.TicTacToe.doMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) (Data.TicTacToe.mv (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))) Data.TicTacToe.ne Data.TicTacToe.PlayerX Data.TicTacToe.state0 (Prelude.Fin.ItIsJust (Data.TicTacToe.ValidMove (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell))))))))))) (Data.TicTacToe.IsValidMove (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) (Prelude.Fin.fS (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) (Prelude.Fin.fZ (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.PlayerX (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell (Prelude.Nat.S Prelude.Nat.Z) Data.TicTacToe.b (Prelude.Vect.:: Data.TicTacToe.Cell Prelude.Nat.Z Data.TicTacToe.b (Prelude.Vect.Nil Data.TicTacToe.Cell)))))))))))))))
Elaborating clause Data.TicTacToe.state1t
Elaborating type decl Data.TicTacToe.AMove[]
Elaborating clause Data.TicTacToe.AMove
Elaborating Data.TicTacToe.TicTacToeRules
./src/Data/TicTacToe.idr:198:6
Forced: Data.TicTacToe.MoveIt fromList []
   from (board : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> Data.TicTacToe.TicTacToeRules (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) (Data.TicTacToe.Game board) (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx)
Forced: Data.TicTacToe.Get fromList [(0,Unconditional)]
   from (g : Type o8) -> Data.TicTacToe.TicTacToeRules g g (\ result : g => g)
Elaborating type decl Data.TicTacToe.TICTACTOE[]
Elaborating clause Data.TicTacToe.TICTACTOE
Elaborating instance Handler
Defaults inserted: [pat Data.TicTacToe.handle 	   handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                              handle st Get k  = k st st where []]
CI {instanceName = constructor of Effects.Handler, class_methods = [(Effects.handle,([],res -> (e t res resk) -> ((x : t) -> (resk x) -> m a) -> m a))], class_defaults = [], class_default_superclasses = [], class_params = [e,m], class_instances = [StdIO, IO instance of Effects.Handler,StdIO, IOExcept a instance of Effects.Handler,System, IO instance of Effects.Handler,System, IOExcept a instance of Effects.Handler,Random, m instance of Effects.Handler]}
[pat @Effects.Handler$TicTacToeRules:m 	   TicTacToeRules, m instance of Effects.Handler  = constructor of Effects.Handler (\{meth0} => \{meth1} => \{meth2} => \{meth3} => \{meth4} => \{meth5} => \{meth6} => method handle meth meth meth) where [tydecl Effects.!handle : res -> (TicTacToeRules t res resk) -> ((x : t) -> (resk x) -> m a) -> m a,pat Effects.!handle 	   method handle game (MoveIt pos player) k  = case validMoveX pos player (getBoard game) ofJust myMove => k (doMove myMove) (move myMove game)|Nothing => k (getBoard game) game where []
                        method handle st Get k  = k st st where []]]
Elaborating clause TicTacToeRules, m instance of Effects.Handler
Elaborating type decl Effects.TicTacToeRules, m instance of Effects.Handler, method handle[]
Elaborating clause Effects.TicTacToeRules, m instance of Effects.Handler, method handle
DEFERRED [(Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle,(m : Type o11 -> Type q11) -> ({a509} : Type t11) -> ({board513} : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (game : Data.TicTacToe.Game {board513}) -> Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) -> Data.TicTacToe.Player -> ((x : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) -> (\ boardx : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Data.TicTacToe.Game boardx) x -> m {a509}) -> Prelude.Maybe.Maybe (Data.TicTacToe.ValidMove (Data.TicTacToe.getBoard {board513} game)) -> m {a509})]
Elaborating clause Effects.case block in TicTacToeRules, m instance of Effects.Handler, method handle
Elaborating instance Default
Defaults inserted: [pat Data.TicTacToe.default 	   default  = startGame where []]
CI {instanceName = constructor of Default.Default, class_methods = [(Default.default,([],a))], class_defaults = [], class_default_superclasses = [], class_params = [a], class_instances = [Int instance of Default.Default,Integer instance of Default.Default,Float instance of Default.Default,Nat instance of Default.Default,Char instance of Default.Default,String instance of Default.Default,Bool instance of Default.Default,() instance of Default.Default,(a, b) instance of Default.Default,Maybe a instance of Default.Default,List a instance of Default.Default,Vect n a instance of Default.Default,LRes lbl a instance of Default.Default]}
[pat @Default.Default$Game startBoard 	   Game startBoard instance of Default.Default  = constructor of Default.Default method default where [tydecl Default.!default : Game startBoard,pat Default.!default 	   method default  = startGame where []]]
Elaborating clause Game startBoard instance of Default.Default
Elaborating type decl Default.Game startBoard instance of Default.Default, method default[]
Elaborating clause Default.Game startBoard instance of Default.Default, method default
Elaborating type decl Data.TicTacToe.game[]
Elaborating clause Data.TicTacToe.game
Elaborating type decl Data.TicTacToe.parse[]
Elaborating clause Data.TicTacToe.parse
Elaborating type decl Data.TicTacToe.dostuff[]
Elaborating clause Data.TicTacToe.dostuff
DEFERRED [(Data.TicTacToe.case block in dostuff,String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Effects.Eff IO (Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))))) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (\ result : Prelude.Maybe.Maybe (Prelude.Fin.Fin (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z)))))))))) => Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))]
Elaborating clause Data.TicTacToe.case block in dostuff
Elaborating type decl Data.TicTacToe.gamexx[]
Elaborating clause Data.TicTacToe.gamexx
Elaborating type decl Data.TicTacToe.isWeiner[]
Elaborating clause Data.TicTacToe.isWeiner
Elaborating type decl Data.TicTacToe.gamex[]
Elaborating clause Data.TicTacToe.gamex
DEFERRED [(Data.TicTacToe.case block in gamex,({someboard505} : Data.TicTacToe.Board) -> {__Unit0} -> Data.TicTacToe.Game {someboard505} -> Data.TicTacToe.Board -> String -> Data.TicTacToe.Player -> {__Unit0} -> {__Unit0} -> String -> Prelude.Maybe.Maybe Data.TicTacToe.Pos -> Data.TicTacToe.Pos -> ({bpat0} : Data.TicTacToe.Board) -> Data.TicTacToe.Board -> Effects.Eff IO (Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell) ((\ v : Data.TicTacToe.Board => Effects.updateWith Effects.EFFECT (Prelude.List.:: Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game {someboard505}) Data.TicTacToe.TicTacToeRules) (Prelude.List.Nil Effects.EFFECT)) ((\ outboard : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Prelude.List.:: Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game outboard) Data.TicTacToe.TicTacToeRules) (Prelude.List.Nil Effects.EFFECT)) v) (Prelude.List.:: Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game {someboard505}) Data.TicTacToe.TicTacToeRules) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT))) (let {scriptvar962} : Language.Reflection.Tactic = Effects.reflectEff (Effects.SubList Effects.EFFECT (Prelude.List.:: Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game {someboard505}) Data.TicTacToe.TicTacToeRules) (Prelude.List.Nil Effects.EFFECT)) (Prelude.List.:: Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game {someboard505}) Data.TicTacToe.TicTacToeRules) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)))) in Effects.Keep Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game {someboard505}) Data.TicTacToe.TicTacToeRules) (Prelude.List.Nil Effects.EFFECT) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT)) (Effects.Drop Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT) (Prelude.List.Nil Effects.EFFECT) (Effects.subListId Effects.EFFECT (Prelude.List.Nil Effects.EFFECT))))) {bpat0}) (\ outboard : Prelude.Vect.Vect (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S (Prelude.Nat.S Prelude.Nat.Z))))))))) Data.TicTacToe.Cell => Prelude.List.:: Effects.EFFECT (Effects.MkEff (Data.TicTacToe.Game outboard) Data.TicTacToe.TicTacToeRules) (Prelude.List.:: Effects.EFFECT (Effects.MkEff {__Unit0} Effect.StdIO.StdIO) (Prelude.List.Nil Effects.EFFECT))))]
Elaborating clause Data.TicTacToe.case block in gamex
Prelude.(!!): index too large

Metavariables: Data.TicTacToe.gamex
*src/Data/TicTacToe> 
