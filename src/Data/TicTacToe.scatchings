module Data.TicTacToe

%default total
--import Effect.System


{--
data X
data O
data Complete
data (?)



data Position =
    NW  -- North-west (top left).
  | N   -- North (top centre).
  | NE  -- North-east (top right).
  | W   -- West (middle left).
  | C   -- Centre.
  | E   -- East (middle right)
  | SW  -- South-west (bottom left).
  | S   -- South (bottom centre).
  | SE  -- South-east (bottom right).


wins : Vect ?winslength (Vect ?serieslength Position)
wins = [
    [NW, W , SW]
  , [N , C , S ]
  , [NE, E , SE]
  , [NW, N , NE]
  , [W , C , E ]
  , [SW, S , SE]
  , [NW, C , SE]
  , [SW, C , NE]
  ]

winslength = proof search
serieslength = proof search

data State =
  XWon | OWon | InPlay

data Player : Type -> Type where
  XPlayer : Player X
  OPlayer : Player O

data Cell = XCell | OCell | ECell

even :  Nat -> Bool
even Z = True
even (S Z) = False
even (S n) = not (even n)

half : Nat -> Nat
half Z = Z
half (S Z) = Z
half (S (S n)) = S (half n)

--xs : Vect n Position -> Vect (if even n then half n else S (half n)) Position
--xs Nil =  Nil
--xs (z :: zs) = if even (length zs) then  (xs zs) else z :: (xs zs)

evenLength : {n: Nat} -> Vect n Position -> Bool
evenLength {n} _ = even n

-- 0 -> 0
-- 1 -> 1
-- 2 -> 1
-- 3 -> 2
-- 4 -> 2
-- 5 -> 3
-- 6 -> n

--

data Blah a =
  B a | BB a a

flatter : (v: Vect n a) -> Vect (counter v) (Blah a)
flatter Nil = Nil
flatter (h :: t) =
  case flatter t of
    Nil => (B h) :: Nil
    ((B a) :: tt) => (BB h a) :: tt
    ((BB a aa) :: tt) => (B h) :: (BB a aa) :: tt

counter : {n: Nat} -> Vect n a -> Nat
counter Nil = 0
counter {n} _ = half (if even n then n else S n)

--}



{-
xs : (v: Vect n Position) -> Vect (countXs v) Position
xs Nil =  Nil
xs (z :: Nil) =  z :: Nil
xs (
xs (z :: zs) = if evenLength zs then z :: (xs zs) else xs zs
-}
--outcomeOf : {n : Nat} -> Vect n Position -> State
--outcomeOf n v = ?Asf


data Board : Nat -> State -> Type where
  InitBoard : Board 0 InPlay
  InProgressBoard : (v : Vect n Position) -> Board n InPlay
--  CompleteBoard : (v : Vect n Position) -> Board n (outcomeOf v)



{-

occupied : {n : Nat} -> Vect  n -> Nat
occupied {n} _ = n

full : Board n -> Bool
full b = occupied b == 9

next : {n : Nat} -> Board n -> Type
next n _ = if even (sum . map countOf $ n) then X else Y

even :  Nat -> Bool
even Z = True
even (S Z) = False
even (S n) = not (even n)
-}
{--
data XX

data OO

data Unoccupied

data Player =
 X | O

other : Player -> Player
other X = O
other O = X

data Cell =
 F Player | E

x : Cell
x = F X

o : Cell
o = F O

e : Cell
e = E

countOf : Cell -> Nat
countOf (F _) = 1
countOf E = 0

data State =
  Playing Player | Finished | NotStarted

data Board : Nat -> Type where
  B : (repr: Vect 9 Cell) -> Board (sum . map countOf $ repr)

line : Cell -> Cell -> Cell -> Maybe Player
line (F X) (F X) (F X) = Just X
line (F O) (F O) (F O) = Just O
line _ _ _ = Nothing

winner : Board n -> Maybe Player
winner (B (ne :: n  :: nw ::
           e  :: c  :: w  ::
           se :: s  :: sw :: Nil)) =
   line ne n nw <|> line e c w <|> line se s sw <|>
   line ne e se <|> line n c s <|> line nw w sw <|>
   line ne c sw <|> line nw c se

total
occupied : {n : Nat} -> Board n -> Nat
occupied {n} _ = n
<
total
full : Board n -> Bool
full b = occupied b == 9

total
nToPlayer :  Nat -> Player
nToPlayer n = (if (even n) then X else O)

example : Board ?wlen
example =
  B (x :: o :: x ::
     o :: x :: e ::
     x :: o :: e :: Nil)

wlen = proof search
--}
{-
data Board : State -> Type where
  Init : Board NotStarted
  Won : Player -> Board Finished
  Draw : Board Finished
  InProgress :
    (p: Player) ->
    (ne : Cell) -> (n  : Cell) -> (nw : Cell) ->
    (e  : Cell) -> (c  : Cell) -> (w  : Cell) ->
    (se : Cell) -> (s  : Cell) -> (sw : Cell) ->
    Board (Playing (other p))
-}
{-
data Game : Effect where

  MoveX : (Board ) ->
-}
